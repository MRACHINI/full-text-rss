<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="css/feed.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:og="http://ogp.me/ns#">
<channel>
<atom:link rel="self" href="http://ftr.rachini.com/makefulltextfeed.php?url=https%3A%2F%2Fwww.hashicorp.com%2Ffeed.xml" />
<atom:link rel="alternate" title="Source URL" href="https://www.hashicorp.com/feed.xml" />
<atom:link rel="related" title="Subscribe to feed" href="http://www.subtome.com/#/subscribe?feeds=http%3A%2F%2Fftr.rachini.com%2Fmakefulltextfeed.php%3Furl%3Dhttps%253A%252F%252Fwww.hashicorp.com%252Ffeed.xml&amp;back=http%3A%2F%2Fftr.rachini.com%2Fmakefulltextfeed.php%3Furl%3Dhttps%253A%252F%252Fwww.hashicorp.com%252Ffeed.xml" />
<title>Hashicorp Blog</title>
<link>http://www.hashicorp.com/blog</link>
<description></description>
<item>
<title>Sentinel and Terraform Enterprise: Applying policy as code to infrastructure provisioning</title>
<link>http://www.hashicorp.com/blog/sentinel-and-terraform-enterprise-policy-as-code</link>
<guid isPermaLink="true" >http://www.hashicorp.com/blog/sentinel-and-terraform-enterprise-policy-as-code</guid>
<description>&lt;p&gt;Infrastructure as code with &lt;a href=&quot;https://www.hashicorp.com/products/terraform&quot;&gt;HashiCorp Terraform&lt;/a&gt; enables operators to automate provisioning at scale. This comes with risks, as every action can have larger effects. Sentinel policy as code places guardrails to protect users from creating infrastructure changes that fall outside of business and/or regulatory policies. Example constraints might include:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Not allowing resources to be provisioned without tags&lt;/li&gt;&amp;#13;
&lt;li&gt;Not allowing “development” resources to be provisioned in “us-east-1”&lt;/li&gt;&amp;#13;
&lt;li&gt;Restricting AWS security group ingress and egress settings by CIDR block&lt;/li&gt;&amp;#13;
&lt;li&gt;Not allowing resources to be provisioned outside of business hours&lt;/li&gt;&amp;#13;
&lt;/ul&gt;&lt;p&gt;Manual enforcement of these constraints becomes increasingly difficult as the demand for infrastructure provisioning grows. Providing policy as code allows these types of constraints to be codified and automated with Sentinel in Terraform Enterprise.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;sentinel&quot;&gt;&lt;a name=&quot;sentinel&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/sentinel-and-terraform-enterprise-policy-as-code#sentinel&quot;&gt;»&lt;/a&gt; Sentinel&lt;/h2&gt;&amp;#13;
&lt;p&gt;Sentinel is HashiCorp's a language and framework for policy built to be embedded in existing software to enable fine-grained, logic-based policy decisions. A policy describes under what circumstances certain behaviors are allowed. Sentinel is embedded into the Enterprise version of each of the HashiCorp products including &lt;a href=&quot;https://www.hashicorp.com/products/terraform&quot;&gt;Terraform&lt;/a&gt;, &lt;a href=&quot;https://www.hashicorp.com/products/vault&quot;&gt;Vault&lt;/a&gt;, &lt;a href=&quot;https://www.hashicorp.com/products/consul&quot;&gt;Consul&lt;/a&gt;, and &lt;a href=&quot;https://www.hashicorp.com/products/nomad&quot;&gt;Nomad&lt;/a&gt;. More details are in the &lt;a href=&quot;https://www.hashicorp.com/blog/sentinel-announcement-policy-as-code-framework&quot;&gt;Announcing Sentinel, HashiCorp’s Policy as Code Framework&lt;/a&gt; blog.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;terraform-enterprise-and-policy-as-code-management&quot;&gt;&lt;a name=&quot;terraform-enterprise-and-policy-as-code-management&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/sentinel-and-terraform-enterprise-policy-as-code#terraform-enterprise-and-policy-as-code-management&quot;&gt;»&lt;/a&gt; Terraform Enterprise and policy as code management&lt;/h2&gt;&amp;#13;
&lt;p&gt;Terraform Enterprise provides a safe workflow for modifying infrastructure by first planning the changes to be made and then applying them if confirmed. Sentinel adds a new step to this process between the plan and apply, where any configured policies will be enforced. Terraform’s plan, configuration, and state data is made available to Sentinel through the &lt;a href=&quot;https://docs.hashicorp.com/sentinel/app/terraform/import-tfplan&quot;&gt;tfplan plugin&lt;/a&gt;, enabling policy enforcements based on proposed changes to the infrastructure.&lt;/p&gt;&amp;#13;
&lt;h3 id=&quot;configuring-a-policy&quot;&gt;&lt;a name=&quot;configuring-a-policy&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/sentinel-and-terraform-enterprise-policy-as-code#configuring-a-policy&quot;&gt;»&lt;/a&gt; Configuring a policy&lt;/h3&gt;&amp;#13;
&lt;p&gt;Sentinel policies are configured on an organization and are applied to all runs on all workspaces within that organization. This is useful for defining organization-wide policies, such as “Disallow wide-open AWS Security Group Ingress”. Policies will also be configurable directly on workspaces in the future, which is a more suitable place to configure environment-specific policies such as “Development environments cannot have more than two app instances”. Policy code is entered into Terraform Enterprise using the API or the web UI, and will soon support VCS integration. The screenshot below shows entering an organization policy in the web UI:&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://www.datocms-assets.com/2885/1509638432-image1.png&quot;&gt;&lt;img src=&quot;https://www.datocms-assets.com/2885/1509638432-image1.png&quot; alt=&quot;Organization policy&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;All policies in Terraform Enterprise have a few configurable attributes:&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Policy Name&lt;/strong&gt; is a simple string used to identify Sentinel policies in Sentinel’s output. This is a detail required for entering policies in the UI or API.&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Enforcement mode&lt;/strong&gt; determines what happens in policy failure scenarios. There are 3 levels to choose from:&lt;/p&gt;&amp;#13;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Advisory mode&lt;/strong&gt; logs warnings, but does not prevent runs from being applied. This is useful for teaching users good habits without preventing actions.&lt;/li&gt;&amp;#13;
&lt;li&gt;&lt;strong&gt;Soft mandatory&lt;/strong&gt; mode requires an operator with appropriate permissions to override any policy failures prior to an apply. This is useful for policies like &quot;Users cannot provision outside of business hours&quot;, which require a failsafe.&lt;/li&gt;&amp;#13;
&lt;li&gt;&lt;strong&gt;Hard mandatory&lt;/strong&gt; mode does not allow any override, and policies must pass prior to an apply. This is useful for policies that enforce regulatory requirements like &quot;All database volumes must be encrypted.&quot;&lt;/li&gt;&amp;#13;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Policy code&lt;/strong&gt; is where the Sentinel policy is entered. Detailed syntax documentation and examples are available at &lt;a href=&quot;https://docs.hashicorp.com/sentinel&quot;&gt;https://docs.hashicorp.com/sentinel&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;h3 id=&quot;writing-policies-in-terraform-enterprise&quot;&gt;&lt;a name=&quot;writing-policies-in-terraform-enterprise&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/sentinel-and-terraform-enterprise-policy-as-code#writing-policies-in-terraform-enterprise&quot;&gt;»&lt;/a&gt; Writing policies in Terraform Enterprise&lt;/h3&gt;&amp;#13;
&lt;p&gt;Sentinel has a pluggable architecture which allows the core language to be extended for each product it is embedded into. The following policy uses the tfplan plugin to check that all AWS security groups do not allow wide-open ingress:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;highlight plaintext&quot;&gt;&amp;#13;
&lt;code&gt;import &quot;tfplan&quot;&amp;#13;
&amp;#13;
disallowed_cidr_blocks = [&amp;#13;
  &quot;0.0.0.0/0&quot;,&amp;#13;
]&amp;#13;
&amp;#13;
main = rule {&amp;#13;
  all tfplan.resources.aws_security_group as _, instances {&amp;#13;
    all instances as _, sg {&amp;#13;
      all sg.applied.ingress as ingress {&amp;#13;
        all disallowed_cidr_blocks as block {&amp;#13;
          ingress.cidr_blocks not contains block&amp;#13;
        }&amp;#13;
      }&amp;#13;
    }&amp;#13;
  }&amp;#13;
}&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;As you can see, the “tfplan” plugin is imported, and then used to access the set of Terraform resources we are interested in (in this case, AWS security groups). The found resources are then iterated upon and each resource’s applied value is tested against the disallowed_cidr_blocks. The &lt;a href=&quot;https://docs.hashicorp.com/sentinel/app/terraform/import-tfplan#type-resource&quot;&gt;applied resource&lt;/a&gt; represents what the value would be, if the plan were applied. This is useful for checking proposed changes to the infrastructure.&lt;/p&gt;&amp;#13;
&lt;p&gt;All Terraform resource and module attributes are available for use within policies. Terraform plans also contain the full state and config data, which are both also available through the “tfplan” plugin.&lt;/p&gt;&amp;#13;
&lt;h3 id=&quot;policy-enforcement&quot;&gt;&lt;a name=&quot;policy-enforcement&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/sentinel-and-terraform-enterprise-policy-as-code#policy-enforcement&quot;&gt;»&lt;/a&gt; Policy Enforcement&lt;/h3&gt;&amp;#13;
&lt;p&gt;Sentinel policies in Terraform Enterprise are enforced immediately after a plan completes. This is reflected on the Runs view page. The “Policy Check” section will appear when the plan completes, if policies are present:&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://www.datocms-assets.com/2885/1509639153-image4.png&quot;&gt;&lt;img src=&quot;https://www.datocms-assets.com/2885/1509639153-image4.png&quot; alt=&quot;Policy Enforcement&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;The “cidr-blocks” policy has failed in the above example. The plan output above shows that the Terraform configuration contains a security group with ingress allowed from “0.0.0.0/0”, which is expressly denied in our Sentinel policy. In this case, the enforcement mode for the policy was set to soft-mandatory, which allows an organization owner to bypass the policy failure for exceptional circumstances. Overriding the policy puts the run into position to be confirmed and applied, which can be done by a workspace owner or an organization owner. A comment box allows the organization owner to comment on why the policy is being overridden. After overriding a policy, the prompt on the run page will look like this:&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://www.datocms-assets.com/2885/1509639333-image6.png&quot;&gt;&lt;img src=&quot;https://www.datocms-assets.com/2885/1509639333-image6.png&quot; alt=&quot;Enforce Policy&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;In advisory enforcement mode, the failure would look very similar, only no intervention by the organization owner would be necessary to confirm and apply the plan. The “Confirm &amp;amp; Apply” button would appear normally, as shown below:&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://www.datocms-assets.com/2885/1509639298-image5.png&quot;&gt;&lt;img src=&quot;https://www.datocms-assets.com/2885/1509639298-image5.png&quot; alt=&quot;Advisory Enforce Policy&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;In hard-mandatory enforcement mode, the policy check would not have any override option for any user. Modifications to the Terraform configuration or Sentinel policy would be required prior to being able to apply changes in this scenario, as shown below:&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://www.datocms-assets.com/2885/1509638980-image3.png&quot;&gt;&lt;img src=&quot;https://www.datocms-assets.com/2885/1509638980-image3.png&quot; alt=&quot;Hard Fail Enforce Policy&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;After adjusting the Terraform configuration to satisfy the policy requirements, the policy check should pass, as shown below:&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://www.datocms-assets.com/2885/1509639180-image2.png&quot;&gt;&lt;img src=&quot;https://www.datocms-assets.com/2885/1509639180-image2.png&quot; alt=&quot;Policy Check Pass&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;The workspace owner is able to confirm and apply a run that passes policy checks freely.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;terraform-enterprise-demo&quot;&gt;&lt;a name=&quot;terraform-enterprise-demo&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/sentinel-and-terraform-enterprise-policy-as-code#terraform-enterprise-demo&quot;&gt;»&lt;/a&gt; Terraform Enterprise Demo&lt;/h2&gt;&amp;#13;
&lt;p&gt;A demo of &lt;a href=&quot;https://www.hashicorp.com/resources/sentinel-terraform-enterprise-demo&quot;&gt;Terraform Enterprise Workspace management and Sentinel policy as code&lt;/a&gt; is shown below.&lt;/p&gt;&amp;#13;
&lt;iframe width=&quot;854&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/kqMVx8U7heo&quot; frameborder=&quot;0&quot; gesture=&quot;media&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&amp;#13;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a name=&quot;conclusion&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/sentinel-and-terraform-enterprise-policy-as-code#conclusion&quot;&gt;»&lt;/a&gt; Conclusion&lt;/h2&gt;&amp;#13;
&lt;p&gt;Policy as code management is available as part of Terraform Enterprise. For more information on Terraform Enterprise or to get started with your free trial, visit the &lt;a href=&quot;https://www.hashicorp.com/products/terraform/&quot;&gt;Terraform product page&lt;/a&gt;.&lt;/p&gt;&amp;#13;
</description>
<pubDate>Thu, 02 Nov 2017 00:00:00 +0000</pubDate>
<dc:creator>Ryan Uber</dc:creator>
<og:title>HashiCorp Terraform and Sentinel</og:title>
<og:description>Infrastructure as code with HashiCorp Terraform enables operators to automate provisioning at scale. Sentinel policy as code places guardrails for provisioning.</og:description>
<og:image>https://www.datocms-assets.com/2885/1508522484-share.jpg</og:image>
<og:type>article</og:type>
<dc:language>es</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hashicorp.com/blog/sentinel-and-terraform-enterprise-policy-as-code</dc:identifier>
</item>
<item>
<title>HashiCorp Nomad 0.7</title>
<link>http://www.hashicorp.com/blog/hashicorp-nomad-0-7</link>
<guid isPermaLink="true" >http://www.hashicorp.com/blog/hashicorp-nomad-0-7</guid>
<description>&lt;p&gt;We are pleased to announce the release of &lt;a href=&quot;https://www.nomadproject.io&quot;&gt;HashiCorp Nomad 0.7&lt;/a&gt;. Nomad is HashiCorp's lightweight and flexible cluster scheduler designed to easily integrate into your existing workflows. Nomad can run both microservice and batch workloads, and has first-class support for Docker as well as non-containerized applications.&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;a href=&quot;https://www.nomadproject.io/downloads.html&quot; class=&quot;cta-btn&quot;&gt;Download Now &lt;/a&gt;&lt;/p&gt;&amp;#13;
Highlights of the Nomad 0.7 release for open source include:&amp;#13;
&amp;#13;
Nomad 0.7 is also the premiere of &lt;a href=&quot;https://www.hashicorp.com/products/nomad/&quot;&gt;Nomad Enterprise&lt;/a&gt;. Nomad Enterprise extends the open source version of Nomad with features related to collaboration, operations and governance. The Nomad Enterprise features in the 0.7 release include:&amp;#13;
&amp;#13;
&lt;h2 id=&quot;access-control-system&quot;&gt;&lt;a name=&quot;access-control-system&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/hashicorp-nomad-0-7#access-control-system&quot;&gt;»&lt;/a&gt; Access Control System&lt;/h2&gt;&amp;#13;
&lt;p&gt;Nomad 0.7 introduces an &lt;a href=&quot;https://www.nomadproject.io/guides/acl.html&quot;&gt;Access Control List (ACL) system&lt;/a&gt; which can be used to limit access to data and APIs. The ACL system is capability-based, relying on tokens which are associated with policies to determine which rules should be applied at runtime. Nomad's ACL system is similar to the access control systems used by &lt;a href=&quot;https://www.consul.io/docs/guides/acl.html&quot;&gt;HashiCorp Consul&lt;/a&gt; and &lt;a href=&quot;https://www.vaultproject.io/docs/concepts/policies.html&quot;&gt;HashiCorp Vault&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;p&gt;The following sections describe the main components of the ACL system in more detail:&lt;/p&gt;&amp;#13;
&lt;h3 id=&quot;policies&quot;&gt;&lt;a name=&quot;policies&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/hashicorp-nomad-0-7#policies&quot;&gt;»&lt;/a&gt; Policies&lt;/h3&gt;&amp;#13;
&lt;p&gt;An ACL policy is a named set of rules that specify the set of capabilities that should be granted to any token associated with the policy. Capabilities can be defined for the following top level policy rules:&lt;/p&gt;&amp;#13;
&lt;ul&gt;&lt;li&gt;namespace - Job related operations by namespace&lt;/li&gt;&amp;#13;
&lt;li&gt;agent - Utility operations in the Agent API&lt;/li&gt;&amp;#13;
&lt;li&gt;node - Node-level catalog operations&lt;/li&gt;&amp;#13;
&lt;li&gt;operator - Cluster-level operations in the Operator API&lt;/li&gt;&amp;#13;
&lt;li&gt;quota - Quota specification related operations&lt;/li&gt;&amp;#13;
&lt;/ul&gt;&lt;p&gt;The HashiCorp Configuration Language (HCL) is used to specify rules.&lt;/p&gt;&amp;#13;
&lt;h3 id=&quot;capabilities&quot;&gt;&lt;a name=&quot;capabilities&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/hashicorp-nomad-0-7#capabilities&quot;&gt;»&lt;/a&gt; Capabilities&lt;/h3&gt;&amp;#13;
&lt;p&gt;Capabilities represent the explicit set of actions that will be authorized by the policy. This includes submitting jobs, reading logs, querying nodes and others. The sample policy below demonstrates using both fine-grained capabilities as well as the coarse-grained policy dispositions (“read”, “write” and “deny”):&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;highlight hcl&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Allow read only access to the default namespace&lt;/span&gt;&amp;#13;
&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;default&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;c1&quot;&gt;# Equivalent to 'policy = &quot;read&quot;'&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;n&quot;&gt;capabilities&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;list-jobs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;read-job&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&amp;#13;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&amp;#13;
&amp;#13;
&lt;span class=&quot;c1&quot;&gt;# Allow writing to the `foo` namespace&lt;/span&gt;&amp;#13;
&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;c1&quot;&gt;# Equivalent to 'capabilities = [&quot;list-jobs&quot;, &quot;read-job&quot;, &quot;submit-job&quot;, &quot;read-logs&quot;, &quot;read-fs&quot;]'&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;n&quot;&gt;policy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;write&quot;&lt;/span&gt;&amp;#13;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&amp;#13;
&amp;#13;
&lt;span class=&quot;n&quot;&gt;agent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;n&quot;&gt;policy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;read&quot;&lt;/span&gt;&amp;#13;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&amp;#13;
&amp;#13;
&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;n&quot;&gt;policy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;read&quot;&lt;/span&gt;&amp;#13;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;h3 id=&quot;tokens&quot;&gt;&lt;a name=&quot;tokens&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/hashicorp-nomad-0-7#tokens&quot;&gt;»&lt;/a&gt; Tokens&lt;/h3&gt;&amp;#13;
&lt;p&gt;ACL tokens are used to authenticate requests and determine if the caller is authorized to perform an action. Each ACL token has a public Accessor ID which is used to identify the token and a Secret ID which is used to make requests to Nomad.&lt;/p&gt;&amp;#13;
&lt;h3 id=&quot;multi-region-configuration&quot;&gt;&lt;a name=&quot;multi-region-configuration&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/hashicorp-nomad-0-7#multi-region-configuration&quot;&gt;»&lt;/a&gt; Multi-Region Configuration&lt;/h3&gt;&amp;#13;
&lt;p&gt;Nomad supports multi-datacenter and multi-region configurations. ACL policies are replicated from the authoritative region to all federated regions when they are created. This allows policies to be administered centrally and for enforcement to be local to each region for low latency. ACL tokens can be optionally replicated to secondary regions to enable secure cross-region requests as necessary.&lt;/p&gt;&amp;#13;
&lt;p&gt;See the &lt;a href=&quot;https://www.nomadproject.io/guides/acl.html&quot;&gt;ACL Guide&lt;/a&gt; for a comprehensive overview.&lt;/p&gt;&amp;#13;
&amp;#13;
&lt;h2 id=&quot;web-ui&quot;&gt;&lt;a name=&quot;web-ui&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/hashicorp-nomad-0-7#web-ui&quot;&gt;»&lt;/a&gt; Web UI&lt;/h2&gt;&amp;#13;
&lt;p&gt;Nomad 0.7 adds a &lt;a href=&quot;https://www.nomadproject.io/guides/ui.html&quot;&gt;Web UI&lt;/a&gt; that enables a user to easily investigate and monitor jobs, allocations, deployments, clients, and servers. The Web UI is embedded in the Nomad binary and is served from the same address and port as the HTTP API (under &lt;code&gt;/ui&lt;/code&gt;). The Web UI can be used in conjunction with the Nomad ACL system to restrict access to jobs, nodes, and other details appropriately. Below are a few screen captures that demonstrate the look-and-feel of the Nomad Web UI.&lt;/p&gt;&amp;#13;
&lt;p&gt;The &lt;a href=&quot;https://www.nomadproject.io/guides/ui.html#reviewing-jobs&quot;&gt;Jobs page&lt;/a&gt; has a searchable table of all jobs in the cluster:&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://www.datocms-assets.com/2885/1509465858-guide-ui-jobs-list.png&quot;&gt;&lt;img src=&quot;https://www.datocms-assets.com/2885/1509465858-guide-ui-jobs-list.png&quot; alt=&quot;Guide UI Jobs List&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;The &lt;a href=&quot;https://www.nomadproject.io/guides/ui.html#inspecting-a-job&quot;&gt;Job Detail page&lt;/a&gt; lists the task groups for the job as well as the status of the job's allocations. This page also has tabs for the job definition, past versions and deployments:&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://www.datocms-assets.com/2885/1509465971-guide-ui-job-detail.png&quot;&gt;&lt;img src=&quot;https://www.datocms-assets.com/2885/1509465971-guide-ui-job-detail.png&quot; alt=&quot;Guide UI Job Detail&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;The &lt;a href=&quot;https://www.nomadproject.io/guides/ui.html#reviewing-clients&quot;&gt;Clients page&lt;/a&gt; has a searchable table of all clients in the cluster:&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://www.datocms-assets.com/2885/1509466048-guide-ui-clients-list.png&quot;&gt;&lt;img src=&quot;https://www.datocms-assets.com/2885/1509466048-guide-ui-clients-list.png&quot; alt=&quot;Guide UI Clients List&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;The Nomad Web UI also includes pages and features related to browsing and monitoring job deployments, inspecting individual clients and servers, and inspecting task groups and allocations.&lt;/p&gt;&amp;#13;
&lt;p&gt;See the &lt;a href=&quot;https://www.nomadproject.io/guides/ui.html&quot;&gt;Web UI guide&lt;/a&gt; for a thorough walkthrough or visit &lt;a href=&quot;https://demo.nomadproject.io&quot;&gt;demo.nomadproject.io&lt;/a&gt; to take the Web UI for a test drive.&lt;/p&gt;&amp;#13;
&amp;#13;
&lt;h2 id=&quot;namespaces-enterprise-&quot;&gt;&lt;a name=&quot;namespaces-enterprise-&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/hashicorp-nomad-0-7#namespaces-enterprise-&quot;&gt;»&lt;/a&gt; Namespaces (Enterprise)&lt;/h2&gt;&amp;#13;
&lt;p&gt;Nomad 0.7 introduces support for multi-tenancy through &lt;a href=&quot;https://www.nomadproject.io/guides/namespaces.html&quot;&gt;Namespaces&lt;/a&gt;. Namespaces allow many teams and projects to share a single cluster, with the guarantee that job names will not conflict. Administrators can use the &lt;a href=&quot;https://www.nomadproject.io/guides/namespaces.html#acls&quot;&gt;ACL system&lt;/a&gt; to restrict access to namespaces and use &lt;a href=&quot;https://www.nomadproject.io/guides/quotas.html&quot;&gt;Resource Quotas&lt;/a&gt; to limit resource consumption on a per-namespace basis. Similar to ACL policies, namespaces are replicated globally and managed by a single authoritative region.&lt;/p&gt;&amp;#13;
&lt;p&gt;An example workflow follows.&lt;/p&gt;&amp;#13;
&lt;p&gt;The &lt;code&gt;namespace apply&lt;/code&gt; command will create a new namespace:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nomad namespace apply &lt;span class=&quot;nt&quot;&gt;-description&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;QA instances of web servers&quot;&lt;/span&gt; web-qa&amp;#13;
Successfully applied namespace &lt;span class=&quot;s2&quot;&gt;&quot;web-qa&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&amp;#13;
&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;The following ACL policy authorizes read vs. write access across multiple namespaces:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight hcl&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Allow read only access to the production namespace&lt;/span&gt;&amp;#13;
&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;web-prod&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;n&quot;&gt;policy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;read&quot;&lt;/span&gt;&amp;#13;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&amp;#13;
&amp;#13;
&lt;span class=&quot;c1&quot;&gt;# Allow writing to the QA namespace&lt;/span&gt;&amp;#13;
&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;web-qa&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;n&quot;&gt;policy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;write&quot;&lt;/span&gt;&amp;#13;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;To run a job in a specific namespace, simply annotate the job with the namespace parameter:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight hcl&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;job&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rails-www&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&amp;#13;
&amp;#13;
    &lt;span class=&quot;c1&quot;&gt;# Run in the QA namespace&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;web-qa&quot;&lt;/span&gt;&amp;#13;
&amp;#13;
    &lt;span class=&quot;c1&quot;&gt;# Only run in one datacenter when QAing&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;n&quot;&gt;datacenters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;us-west1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&amp;#13;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;Include the &lt;code&gt;namespace&lt;/code&gt; parameter to run a CLI command within the context of a given namespace:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nomad job status &lt;span class=&quot;nt&quot;&gt;-namespace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;web-qa&amp;#13;
ID         Type     Priority  Status   Submit Date&amp;#13;
rails-www  service  50        running  09/17/17 19:17:46 UTC&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;See the &lt;a href=&quot;https://www.nomadproject.io/guides/namespaces.html&quot;&gt;Namespaces Guide&lt;/a&gt; for further detail.&lt;/p&gt;&amp;#13;
&amp;#13;
&lt;h2 id=&quot;resource-quotas-enterprise-&quot;&gt;&lt;a name=&quot;resource-quotas-enterprise-&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/hashicorp-nomad-0-7#resource-quotas-enterprise-&quot;&gt;»&lt;/a&gt; Resource Quotas (Enterprise)&lt;/h2&gt;&amp;#13;
&lt;p&gt;Nomad 0.7 adds support for &lt;a href=&quot;https://www.nomadproject.io/guides/quotas.html&quot;&gt;Resource Quotas&lt;/a&gt;. Resource quotas provide a means for operators to limit CPU and memory consumption across namespaces to guarantee that no single tenant can dominate usage. When a quota is attached to a namespace, the resources reserved for all existing and future jobs are accounted towards the defined limits. A single quota can also be attached to multiple namespaces if a higher level accounting across a subset of namespaces is desired. Like ACL policies and namespaces, resource quotas are replicated globally and managed by a single authoritative region.&lt;/p&gt;&amp;#13;
&lt;p&gt;When a resource quota is exhausted, Nomad will queue incoming work to be scheduled when resources become available, either because jobs have completed or the quota has been increased. This behavior provides a higher Quality of Service (QoS) without forcing clients to implement their own queuing on top of Nomad.&lt;/p&gt;&amp;#13;
&lt;p&gt;Resource quota limits are defined on a per-region basis. The quota definition below limits CPU consumption to 2500 and memory consumption to 1000 for the &lt;code&gt;global&lt;/code&gt; region:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight hcl&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;web-qa-quota&quot;&lt;/span&gt;&amp;#13;
&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Limit the web-qa namespace&quot;&lt;/span&gt;&amp;#13;
&amp;#13;
&lt;span class=&quot;c1&quot;&gt;# Create a limit for the global region. Additional limits may&lt;/span&gt;&amp;#13;
&lt;span class=&quot;c1&quot;&gt;# be specified in-order to limit other regions.&lt;/span&gt;&amp;#13;
&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;global&quot;&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;n&quot;&gt;region_limit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&amp;#13;
        &lt;span class=&quot;n&quot;&gt;cpu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2500&lt;/span&gt;&amp;#13;
        &lt;span class=&quot;n&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&amp;#13;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;The following command will create a new quota:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nomad quota apply web-qa-quota.hcl&amp;#13;
Successfully applied quota specification &lt;span class=&quot;s2&quot;&gt;&quot;web-qa-quota&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;To apply the quota to the &lt;code&gt;web-qa&lt;/code&gt; namespace, use:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nomad namespace apply &lt;span class=&quot;nt&quot;&gt;-quota&lt;/span&gt; web-qa-quota web-qa&amp;#13;
Successfully applied namespace &lt;span class=&quot;s2&quot;&gt;&quot;web-qa&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;The &lt;code&gt;quota status&lt;/code&gt; CLI command returns the current accounting for the quota:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nomad quota status web-qa-quota&amp;#13;
Name        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; web-qa-quota&amp;#13;
Description &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Limit the web-qa namespace&amp;#13;
Limits      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1&amp;#13;
&amp;#13;
Quota Limits&amp;#13;
Region  CPU Usage   Memory Usage&amp;#13;
global  500 / 2500  256 / 1000&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;Access to resource quotas can be restricted using the &lt;a href=&quot;https://www.nomadproject.io/guides/acl.html#quota-rules&quot;&gt;ACL system&lt;/a&gt;:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight hcl&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Allow read only access to quotas.&lt;/span&gt;&amp;#13;
&lt;span class=&quot;n&quot;&gt;quota&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;n&quot;&gt;policy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;read&quot;&lt;/span&gt;&amp;#13;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;See the &lt;a href=&quot;https://www.nomadproject.io/guides/quotas.html&quot;&gt;Resource Quotas Guide&lt;/a&gt; for more information.&lt;/p&gt;&amp;#13;
&amp;#13;
&lt;h2 id=&quot;sentinel-policies-enterprise-&quot;&gt;&lt;a name=&quot;sentinel-policies-enterprise-&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/hashicorp-nomad-0-7#sentinel-policies-enterprise-&quot;&gt;»&lt;/a&gt; Sentinel Policies (Enterprise)&lt;/h2&gt;&amp;#13;
&lt;p&gt;Nomad 0.7 integrates with &lt;a href=&quot;https://www.hashicorp.com/blog/sentinel-announcement-policy-as-code-framework/&quot;&gt;HashiCorp Sentinel&lt;/a&gt; to enable fine-grained policy enforcement on job submission and job updates. Sentinel is an embedded policy as code framework that enables fine-grained policy decisions optionally using external information. This integration extends the capabilities of Nomad ACLs which are limited to the authorization of coarse grained capabilities across Nomad namespaces and APIs. Sentinel enables a team to manage policy “as code” using constructs like version control, iteration, testing and automation that characterize the management of application code and infrastructure code today.&lt;/p&gt;&amp;#13;
&lt;p&gt;Sentinel policies are specified in the &lt;a href=&quot;https://www.nomadproject.io/guides/sentinel-policy.html#&quot;&gt;Sentinel Language&lt;/a&gt; which has been optimized for ease-of-use and performance. Nomad currently supports Sentinel policy enforcement for job submission only. All fields represented in the &lt;a href=&quot;https://www.nomadproject.io/api/json-jobs.html&quot;&gt;JSON job specification&lt;/a&gt; are implicitly available.&lt;/p&gt;&amp;#13;
&lt;p&gt;The following Sentinel policy would restrict jobs to only allow Docker workloads:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;&amp;#13;
&lt;code&gt;allowed_drivers &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;docker&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&amp;#13;
&amp;#13;
main &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; rule &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&amp;#13;
    all job.task_groups as tg &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&amp;#13;
        all tg.tasks as t &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; t.driver &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;allowed_drivers &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&amp;#13;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;This policy would limit jobs to only 8 GB of memory resources:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;&amp;#13;
&lt;code&gt;func sum_tasks&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;tg&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&amp;#13;
    count &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0&amp;#13;
    &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;tg.tasks as t &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; count +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; t.resources.memory &lt;span class=&quot;k&quot;&gt;else &lt;/span&gt;0 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;count&amp;#13;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&amp;#13;
&amp;#13;
func sum_job&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;job&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&amp;#13;
    count &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0&amp;#13;
    &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;job.task_groups as tg &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&amp;#13;
        &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;tg.count &amp;lt; 0 &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&amp;#13;
            fail&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unreasonable count value: %d&quot;&lt;/span&gt;, tg.count&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&amp;#13;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&amp;#13;
&amp;#13;
        count +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; sumTasks&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;tg&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; tg.count&amp;#13;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&amp;#13;
&amp;#13;
    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;count&amp;#13;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&amp;#13;
&amp;#13;
main &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; rule &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; sum_job&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;job&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 8000 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;The &lt;code&gt;nomad sentinel&lt;/code&gt; CLI command can be used to create and manage Sentinel policies. The following command adds a new policy at the &lt;code&gt;advisory&lt;/code&gt; enforcement level:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nomad sentinel apply &lt;span class=&quot;nt&quot;&gt;-level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;advisory test-policy test.sentinel&amp;#13;
Successfully wrote &lt;span class=&quot;s2&quot;&gt;&quot;test-policy&quot;&lt;/span&gt; Sentinel policy!&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;Soft and hard mandatory &lt;a href=&quot;https://www.nomadproject.io/guides/sentinel-policy.html#enforcement-level&quot;&gt;enforcement levels&lt;/a&gt; are also available. See the &lt;a href=&quot;https://www.nomadproject.io/guides/sentinel-policy.html&quot;&gt;Sentinel Policies Guide&lt;/a&gt; for more details.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;additional-new-features-and-bug-fixes&quot;&gt;&lt;a name=&quot;additional-new-features-and-bug-fixes&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/hashicorp-nomad-0-7#additional-new-features-and-bug-fixes&quot;&gt;»&lt;/a&gt; Additional New Features and Bug Fixes&lt;/h2&gt;&amp;#13;
&lt;p&gt;Nomad 0.7 also adds support for additional key features including &lt;a href=&quot;https://www.nomadproject.io/docs/agent/telemetry.html#host-metrics-post-nomad-version-0-7-&quot;&gt;tagged metrics&lt;/a&gt; and &lt;a href=&quot;https://www.nomadproject.io/docs/job-specification/check_restart.html&quot;&gt;automatic restart of unhealthy tasks&lt;/a&gt; based on health check status. There are many bug fixes and other improvements as well. Please review the Nomad &lt;a href=&quot;https://github.com/hashicorp/nomad/blob/master/CHANGELOG.md&quot;&gt;CHANGELOG&lt;/a&gt; for a detailed list of changes and be sure to read the &lt;a href=&quot;https://www.nomadproject.io/docs/upgrade/index.html&quot;&gt;upgrade guide&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;nomad-talks-at-hashiconf-2017&quot;&gt;&lt;a name=&quot;nomad-talks-at-hashiconf-2017&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/hashicorp-nomad-0-7#nomad-talks-at-hashiconf-2017&quot;&gt;»&lt;/a&gt; Nomad Talks at HashiConf 2017&lt;/h2&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://www.hashicorp.com/resources/operating-jobs-scale-nomad&quot;&gt;Operating Jobs at Scale with Nomad&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://www.hashicorp.com/resources/end-to-end-production-nomad-citadel&quot;&gt;End to End Production Nomad at Citadel&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://www.hashicorp.com/resources/pagerduty-nomad-journey&quot;&gt;PagerDuty’s Nomadic Journey&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://www.hashicorp.com/resources/elsevier-nomad-container-framework-demo&quot;&gt;Containing Elsevier's World: A Nomad Framework&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://www.hashicorp.com/resources/backend-batch-processing-nomad&quot;&gt;Backend Batch Processing with Nomad&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://www.hashicorp.com/resources/jet-walmart-hashicorp-nomad-azure-run-apps&quot;&gt;Jet.com discussing Nomad in HashiConf 2017 Keynote&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;getting-started&quot;&gt;&lt;a name=&quot;getting-started&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/hashicorp-nomad-0-7#getting-started&quot;&gt;»&lt;/a&gt; Getting Started&lt;/h2&gt;&amp;#13;
&lt;p&gt;To get started with Nomad open source, download the latest version at &lt;a href=&quot;https://www.nomadproject.io/&quot;&gt;https://www.nomadproject.io/&lt;/a&gt;. To find out more about Nomad Enterprise, visit &lt;a href=&quot;https://www.hashicorp.com/products/nomad&quot;&gt;https://www.hashicorp.com/products/nomad&lt;/a&gt;.&lt;/p&gt;&amp;#13;
</description>
<pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate>
<dc:creator>Rob Genova</dc:creator>
<og:title>HashiCorp Nomad 0.7</og:title>
<og:description>We are pleased to announce the release of HashiCorp Nomad 0.7.</og:description>
<og:image>https://www.datocms-assets.com/2885/1508522484-share.jpg</og:image>
<og:type>article</og:type>
<dc:language>de</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hashicorp.com/blog/hashicorp-nomad-0-7</dc:identifier>
</item>
<item>
<title>Transparent Data Encryption in the Modern Datacenter</title>
<link>http://www.hashicorp.com/blog/transparent-data-encryption-in-the-modern-datacenter</link>
<guid isPermaLink="true" >http://www.hashicorp.com/blog/transparent-data-encryption-in-the-modern-datacenter</guid>
<description>&lt;p&gt;Transparent Data Encryption (TDE) is a technology coined by Microsoft, IBM, and Oracle to encrypt databases on the filesystem. TDE attempts to solve the problem of protecting data at rest, encrypting databases both on the hard drive and consequently on backup media. It does not protect data in transit, nor data in use. Organizations often employ TDE to solve compliance issues which require the protection of data at rest.&lt;/p&gt;&lt;p&gt;While TDE is a step in the right direction for better security, it was founded in an era where one of the biggest threats to security was physical infiltration of the datacenter. There were genuine concerns that an attacker would steal physical tape media and walk out. Additionally, to enable automatic booting, many databases that implement TDE store the lowest level encryption keys in persistent storage, a security issue vendors acknowledge because the stored keys can be directly recovered from an online system and used to decrypt the databases. Even though TDE solves a compliance problem, it does not solve emerging challenges in the modern security space.&lt;/p&gt;&amp;#13;
&lt;p&gt;The shift to cloud computing, specifically public cloud, forces us to rethink the traditional approaches to security and to adapt existing threat models in this hybrid world.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;a-hybrid-approach&quot;&gt;&lt;a name=&quot;a-hybrid-approach&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/transparent-data-encryption-in-the-modern-datacenter#a-hybrid-approach&quot;&gt;»&lt;/a&gt; A Hybrid Approach&lt;/h2&gt;&amp;#13;
&lt;p&gt;Just as organizations are quickly adopting multiple cloud technologies, security teams should be adopting hybrid threat models. With the move to public and hybrid cloud, physical security threats are being superseded by a new type of digital threat. Public cloud vendors employ industry-leading research and threat assessment experts to protect against physical access. Many of these vendors have published numerous white papers and have dedicated resource pages that describe their processes for physical security compliance. Simply put - physical security is a solved problem in the public cloud.&lt;/p&gt;&amp;#13;
&lt;p&gt;Researchers often describe security as &lt;a href=&quot;https://en.wikipedia.org/wiki/Defense_in_depth_(computing)&quot;&gt;Defense in Depth&lt;/a&gt;, a concept in which multiple layers of security controls are placed throughout a system. IT Security should be treated as an onion or castle. Implementing only TDE is like putting only a moat around a castle. Once an attacker circumvents the moat, there are no additional protections in place to mitigate the attack. Just like a castle, we should implement a multi-faceted, onion-like approach to security. TDE is just the outermost layer of the encryption castle.&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;HashiCorp's Vault&lt;/a&gt; provides &lt;a href=&quot;https://www.hashicorp.com/blog/how-vault-encrypts-application-data-during-transit-and-at-rest&quot;&gt;Encryption as a Service (EaaS)&lt;/a&gt; and assists security teams in fortifying their security architectures. Vault encrypts data in transit with TLS and at rest with AES 256-bit GCM encryption. With Vault's &lt;a href=&quot;https://www.vaultproject.io/docs/secrets/transit/&quot;&gt;transit service&lt;/a&gt;, databases never store plaintext data; they only persist encrypted data. Even if an attacker were able to access the raw data, they would only have encrypted bits. Furthermore, Vault manages the encryption keys out-of-band, on a separate system. This means an attacker would need to compromise multiple systems before exfiltrating data.&lt;/p&gt;&amp;#13;
&lt;p&gt;With Vault's EaaS, applications send plaintext data to Vault (encrypted in transit with TLS). Vault encrypts this plaintext data using a high-entropy encryption key and returns the data to the application. The application then persists this ciphertext in the database. Visually:&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://www.datocms-assets.com/2885/1509560139-transparent-data-encryption-vault-transit-encrypt.svg&quot;&gt;&lt;img src=&quot;https://www.datocms-assets.com/2885/1509560139-transparent-data-encryption-vault-transit-encrypt.svg&quot; alt=&quot;Vault Transit Encryption&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;It is important to note that Vault's EaaS does not require any plugins or special database integrations. The ciphertext is simply stored in the database as text (&lt;code&gt;VARCHAR&lt;/code&gt;, &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, etc.). This makes this solution incredibly portable, even with legacy databases.&lt;/p&gt;&amp;#13;
&lt;p&gt;When an application needs the plaintext data, the process is simply reversed. The application requests the ciphertext data from the database. It then sends the ciphertext along with Vault authentication information to Vault. Vault authenticates and authorizes the decryption operation and, if permitted, returns the plaintext data to the application. Note that the database never has the plaintext data, and the application only has the plaintext data for the duration which it is needed.&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://www.datocms-assets.com/2885/1509560137-transparent-data-encryption-vault-transit-decrypt.svg&quot;&gt;&lt;img src=&quot;https://www.datocms-assets.com/2885/1509560137-transparent-data-encryption-vault-transit-decrypt.svg&quot; alt=&quot;Vault Transit Decryption&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;For maximum security, we can combine Vault's EaaS and TDE. The following graphic shows the differences between TDE, Vault's EaaS, and TDE combined with EaaS.&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://www.datocms-assets.com/2885/1509556145-vault-transit-tde.svg&quot;&gt;&lt;img src=&quot;https://www.datocms-assets.com/2885/1509556145-vault-transit-tde.svg&quot; alt=&quot;Vault Transit with Transparent Data Encryption&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;By combining TDE and Vault EaaS, organizations can adopt modern security best practices while adhering to legacy compliance requirements.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;per-row-encryption-keys&quot;&gt;&lt;a name=&quot;per-row-encryption-keys&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/transparent-data-encryption-in-the-modern-datacenter#per-row-encryption-keys&quot;&gt;»&lt;/a&gt; Per-Row Encryption Keys&lt;/h2&gt;&amp;#13;
&lt;p&gt;As an added benefit, Vault also supports &lt;em&gt;derived encryption&lt;/em&gt;. In this mode, Vault can encrypt each row in each table of the database with a unique encryption key. Even if an attacker were able to access the raw data, each row of the database is encrypted with a unique, high-entropy key. The database never sees the plain-text value. Even as modern processing power increases, an attacker would still need to brute-force an NP-hard problem for &lt;em&gt;each&lt;/em&gt; row of the database to retrieve the plaintext values. You can &lt;a href=&quot;https://www.vaultproject.io/docs/secrets/transit/&quot;&gt;read more about derived encryption in the transit secrets backend in the Vault documentation&lt;/a&gt; or &lt;a href=&quot;https://www.hashicorp.com/blog/how-vault-encrypts-application-data-during-transit-and-at-rest&quot;&gt;learn more how Vault encrypts application data in transit and at rest&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;programmatic-unique-access&quot;&gt;&lt;a name=&quot;programmatic-unique-access&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/transparent-data-encryption-in-the-modern-datacenter#programmatic-unique-access&quot;&gt;»&lt;/a&gt; Programmatic, Unique Access&lt;/h2&gt;&amp;#13;
&lt;p&gt;In addition to encrypting data in transit and at rest, Vault also provides programmatic access to database credentials. Traditionally, application developers request credentials from the database or security teams and then inject those credentials into the application at runtime. There are a number of shortcomings in this approach, including lack of provenance and secret sprawl. Credential rotation and revocation are often an afterthought, and since each instance of the application uses the same database credentials, these operations typically involved scheduled downtime.&lt;/p&gt;&amp;#13;
&lt;p&gt;The security and database teams collaborate to configure Vault with the stored procedures and functions required to create a new user. This information is codified and templatized. Applications authenticate to Vault and request new credentials via Vault's API. Vault programmatically connects to the database, runs the configured SQL, and generates a new user. With every service accessing the database with unique credentials, it makes auditing much easier when questionable data access is discovered: you can track it down to the specific instance of a service based on the SQL username.&lt;/p&gt;&amp;#13;
&lt;p&gt;Lastly, Vault makes use of its own internal revocation system to ensure that users become invalid within a reasonable time of the lease expiring. Unlike a traditional authentication credential which is valid for an infinite amount of time, Vault enforces time-based access control through its leasing model. This prevents long-lived credentials, reducing the surface area for an attack. Even if an attacker could gain access to valid credentials, they would only be able to retrieve encrypted data from the database with Vault's EaaS. The attacker would additionally need to compromise Vault to decrypt the encrypted data.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a name=&quot;conclusion&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/transparent-data-encryption-in-the-modern-datacenter#conclusion&quot;&gt;»&lt;/a&gt; Conclusion&lt;/h2&gt;&amp;#13;
&lt;p&gt;Transparent Data Encryption is just one layer of the security onion. While it assists in compliance requirements, it does not protect against more modern security threats, nor does it provide many benefits when running on a public cloud provider. By combining TDE with &lt;a href=&quot;https://www.vaultproject.io/docs/secrets/transit/&quot;&gt;Vault's Encryption as a Service&lt;/a&gt;, organizations can easily adopt modern security best practices while adhering to legacy compliance requirements.&lt;/p&gt;&amp;#13;
&lt;p&gt;Interested in more Vault’s features like a managed UI, cluster management, HSM integration, or multi-datacenter replication and disaster recovery? Be sure to check out &lt;a href=&quot;https://www.hashicorp.com/products/vault&quot;&gt;Vault Enterprise&lt;/a&gt;.&lt;/p&gt;&amp;#13;
</description>
<pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate>
<dc:creator>Seth Vargo</dc:creator>
<og:title>Transparent Data Encryption in the Modern Datacenter</og:title>
<og:description>Transparent Data Encryption is a common practice in traditional datacenters, but is it still relevant with the increase in public cloud computing?</og:description>
<og:image>https://www.datocms-assets.com/2885/1508475795-vault-social-share.png</og:image>
<og:type>article</og:type>
<dc:language>fr</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hashicorp.com/blog/transparent-data-encryption-in-the-modern-datacenter</dc:identifier>
</item>
<item>
<title>Building a Vault Token Helper</title>
<link>http://www.hashicorp.com/blog/building-a-vault-token-helper</link>
<guid isPermaLink="true" >http://www.hashicorp.com/blog/building-a-vault-token-helper</guid>
<description>&lt;p&gt;Vault is an open source tool for managing secrets. Earlier we showcased how Vault provides &lt;a href=&quot;https://www.hashicorp.com/blog/how-vault-encrypts-application-data-during-transit-and-at-rest&quot;&gt;Encryption as a Service&lt;/a&gt; and how &lt;a href=&quot;https://www.hashicorp.com/blog/building-a-vault-secure-plugin&quot;&gt;build custom secure Vault plugins&lt;/a&gt;. This post explores a lesser-known feature of Vault Open Source and Vault Enterprise: token helpers.&lt;/p&gt;&lt;h2 id=&quot;token-helpers&quot;&gt;&lt;a name=&quot;token-helpers&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/building-a-vault-token-helper#token-helpers&quot;&gt;»&lt;/a&gt; Token Helpers&lt;/h2&gt;&amp;#13;
&lt;p&gt;In many ways, Vault is conceptually similar to a web application. Users authenticate to applications via username and password, OAuth (login with GitHub, login with Twitter, etc), or tokens through an API. During that process, the web application takes the user-supplied information, verifies it, and maps the verified user's identity onto policies and permissions in the application. The user's &quot;identity&quot; is commonly returned in the form of a &quot;session&quot; which is stored in a secure cookie, managed by the web browser. Future requests to the website include the signed cookie, which the application uses to verify identity. Without this functionality, users would need to enter their username and password each time they clicked a link.&lt;/p&gt;&amp;#13;
&lt;p&gt;In Vault, the most equivalent thing to a &quot;session&quot; is the Vault Token. Additionally, since it does not run in the browser, Vault makes use of &lt;em&gt;token helpers&lt;/em&gt; for the local &lt;code&gt;vault&lt;/code&gt; command line tool. A token helper shares similar responsibilities for tokens as a browser does for cookies. Token helpers are responsible for storing, updating, retrieving, and deleting authentication data for the local CLI.&lt;/p&gt;&amp;#13;
&lt;p&gt;When making an authenticated API request, the Vault CLI queries the configured token helper, and the token helper returns the stored token. The Vault CLI uses this token to make authenticated API requests to the Vault server. Additionally, the Vault CLI may request the token helper store authentication data, perhaps as a byproduct of a &lt;code&gt;vault auth&lt;/code&gt; command.&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://www.datocms-assets.com/2885/1509460708-vault-token-helper.svg&quot;&gt;&lt;img src=&quot;https://www.datocms-assets.com/2885/1509460708-vault-token-helper.svg&quot; alt=&quot;Vault Token Helper Architecture&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;default-token-helper&quot;&gt;&lt;a name=&quot;default-token-helper&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/building-a-vault-token-helper#default-token-helper&quot;&gt;»&lt;/a&gt; Default Token Helper&lt;/h2&gt;&amp;#13;
&lt;p&gt;Vault includes a default token helper, which persists the provided token in the current user's home directory at &lt;code&gt;~/.vault-token&lt;/code&gt;. For example:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vault auth 11413f3f-ec5b-cd25-92cb-96970d76bbe1&amp;#13;
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;&amp;#13;
&amp;#13;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ~/.vault-token&amp;#13;
11413f3f-ec5b-cd25-92cb-96970d76bbe1&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;Users on shared systems or users that do not trust the filesystem for storing sensitive data may want to leverage a different tool like 1Password, LastPass, or Keychain Access to store local Vault authentication information. Vault's extensible token helper model makes it easy to build custom integrations into these third party tools.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;writing-a-custom-token-helper&quot;&gt;&lt;a name=&quot;writing-a-custom-token-helper&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/building-a-vault-token-helper#writing-a-custom-token-helper&quot;&gt;»&lt;/a&gt; Writing a Custom Token Helper&lt;/h2&gt;&amp;#13;
&lt;p&gt;Token helpers are local binaries or scripts that receive shell commands from Vault to store, get, or erase a token:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight plaintext&quot;&gt;&amp;#13;
&lt;code&gt;store -&amp;gt; my-helper store (the token to store is passed on stdin)&amp;#13;
get -&amp;gt; my-helper get (return the token on stdout)&amp;#13;
erase -&amp;gt; my-helper erase&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;h3 id=&quot;storing&quot;&gt;&lt;a name=&quot;storing&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/building-a-vault-token-helper#storing&quot;&gt;»&lt;/a&gt; Storing&lt;/h3&gt;&amp;#13;
&lt;p&gt;Vault will invoke the token helper with the argument &lt;code&gt;store&lt;/code&gt;. The token to store will be provided on standard in.&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;my-helper store &amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;For local testing, pipe the token to the binary:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;super-secret-token&quot;&lt;/span&gt; | my-helper store&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;The token helper should:&lt;/p&gt;&amp;#13;
&lt;ol readability=&quot;5.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;&amp;#13;
&lt;p&gt;Strip any leading or trailing whitespace from the provided token on standard in. Vault tokens will never have leading or trailing whitespace, but some shells can inadvertently add it.&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;1&quot;&gt;&amp;#13;
&lt;p&gt;Verify that the provided token is not the empty string. If the value is the empty string, call &lt;code&gt;erase&lt;/code&gt; instead.&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;4&quot;&gt;&amp;#13;
&lt;p&gt;Persist the token in a durable manner. Because the binary is executed as a command (not a server), most token helpers cannot persist the token in memory; they will need to write the token to disk, a keychain, or some external tool.&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;-1&quot;&gt;&amp;#13;
&lt;p&gt;Exit with status code 0 (ok).&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;/ol&gt;&lt;p&gt;In general, the store operation should only return errors that occur with persisting the provided token.&lt;/p&gt;&amp;#13;
&lt;h3 id=&quot;getting&quot;&gt;&lt;a name=&quot;getting&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/building-a-vault-token-helper#getting&quot;&gt;»&lt;/a&gt; Getting&lt;/h3&gt;&amp;#13;
&lt;p&gt;Vault will invoke the token helper with the argument &lt;code&gt;get&lt;/code&gt;. The token helper should return the stored token, if any, on standard out.&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;my-helper get&amp;#13;
super-secret-token&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;If no value is stored, the token helper must return an empty value. A token helper should never return an error if a value is not stored.&lt;/p&gt;&amp;#13;
&lt;p&gt;The token helper should:&lt;/p&gt;&amp;#13;
&lt;ol readability=&quot;0&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;&amp;#13;
&lt;p&gt;Retrieve the token from the durable storage.&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;-1&quot;&gt;&amp;#13;
&lt;p&gt;Print the token on standard out.&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;-1&quot;&gt;&amp;#13;
&lt;p&gt;Exit with status code 0 (ok).&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;/ol&gt;&lt;h3 id=&quot;erasing&quot;&gt;&lt;a name=&quot;erasing&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/building-a-vault-token-helper#erasing&quot;&gt;»&lt;/a&gt; Erasing&lt;/h3&gt;&amp;#13;
&lt;p&gt;Vault will invoke the token helper with the argument &lt;code&gt;erase&lt;/code&gt;. The token helper should scrub the stored token, if any.&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;my-helper erase&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;If no value is stored, the token helper should simply return. A token helper should never return an error if a value is not stored.&lt;/p&gt;&amp;#13;
&lt;p&gt;The token helper should:&lt;/p&gt;&amp;#13;
&lt;ol readability=&quot;-1&quot;&gt;&lt;li readability=&quot;-1&quot;&gt;&amp;#13;
&lt;p&gt;Purge or scrub any trace of the token.&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;-1&quot;&gt;&amp;#13;
&lt;p&gt;Exit with status code 0 (ok).&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;/ol&gt;&lt;h3 id=&quot;example&quot;&gt;&lt;a name=&quot;example&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/building-a-vault-token-helper#example&quot;&gt;»&lt;/a&gt; Example&lt;/h3&gt;&amp;#13;
&lt;p&gt;Here is an example token helper written in Ruby which behaves similarly to the default token helper. Instead of storing the token in &lt;code&gt;~/.vault-token&lt;/code&gt;, it stores the token in &lt;code&gt;/tmp/vault-token&lt;/code&gt;:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;highlight ruby&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;&amp;#13;
&amp;#13;
&lt;span class=&quot;no&quot;&gt;PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/tmp/vault-token&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;freeze&lt;/span&gt;&amp;#13;
&amp;#13;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;get&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;erase&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;erase&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;store&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Unknown method &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&amp;#13;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&amp;#13;
&amp;#13;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strip&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exist?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&amp;#13;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&amp;#13;
&amp;#13;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;erase&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exist?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&amp;#13;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&amp;#13;
&amp;#13;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;store&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;wb+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&amp;#13;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&amp;#13;
&amp;#13;
&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;There are a few important things to note, namely:&lt;/p&gt;&amp;#13;
&lt;ul&gt;&lt;li&gt;The program only responds to &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;erase&lt;/code&gt;, and &lt;code&gt;store&lt;/code&gt;.&lt;/li&gt;&amp;#13;
&lt;li&gt;The &lt;code&gt;get&lt;/code&gt; operation does not include any leader or trailing whitespace.&lt;/li&gt;&amp;#13;
&lt;li&gt;The &lt;code&gt;erase&lt;/code&gt; command gracefully handles if the file does not exist.&lt;/li&gt;&amp;#13;
&lt;li&gt;The &lt;code&gt;store&lt;/code&gt; command upserts the creation of the file if it does not already exist, and overwrites any existing content in the file if it does.&lt;/li&gt;&amp;#13;
&lt;/ul&gt;&lt;p&gt;For a more advanced token helper that integrates with Mac OS Keychain Access, check out &lt;a href=&quot;https://github.com/sethvargo/vault-token-helper-osx-keychain&quot;&gt;sethvargo/vault-token-helper-osx-keychain on GitHub&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;p&gt;Token helpers can be written in almost any language, and thus can perform almost any function, including integrating with third-party services and APIs. The next section details how to install this token helper and configure the local Vault CLI to use it.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;installing-and-configuring&quot;&gt;&lt;a name=&quot;installing-and-configuring&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/building-a-vault-token-helper#installing-and-configuring&quot;&gt;»&lt;/a&gt; Installing and Configuring&lt;/h2&gt;&amp;#13;
&lt;p&gt;With no custom configuration, the local Vault CLI tool will use the default token helper. To configure the local CLI tool, create a configuration file for the Vault CLI at &lt;code&gt;~/.vault&lt;/code&gt;:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight hcl&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# ~/.vault&lt;/span&gt;&amp;#13;
&lt;span class=&quot;n&quot;&gt;token_helper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/full/path/to/token-helper.rb&quot;&lt;/span&gt;&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In this example, we are configuring the local Vault CLI tool. These options will apply for every &lt;code&gt;vault&lt;/code&gt; command run on this system for this user. This is &lt;em&gt;different&lt;/em&gt; than the Vault server configuration file, which is given to a server at startup and details the server's configuration options.&lt;/p&gt;&amp;#13;
&lt;p&gt;The Vault CLI tool automatically searches for &lt;code&gt;~/.vault&lt;/code&gt; for configuration options, parses, and loads them for each invocation of the command. It is possible to specify a different path for this configuration file using the &lt;code&gt;VAULT_CONFIG_PATH&lt;/code&gt; environment variable, but this post assumes the default location.&lt;/p&gt;&amp;#13;
&lt;p&gt;The path to the token helper &lt;strong&gt;must&lt;/strong&gt; be the full path to the binary, and the binary must have executable permissions. The token helper cannot be a relative path, and it cannot be anything other than the path to a binary.&lt;/p&gt;&amp;#13;
&lt;p&gt;That is all the required configuration! All future &lt;code&gt;vault&lt;/code&gt; commands that require a token will automatically use the configured token helper.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a name=&quot;conclusion&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/building-a-vault-token-helper#conclusion&quot;&gt;»&lt;/a&gt; Conclusion&lt;/h2&gt;&amp;#13;
&lt;p&gt;Extending a security tool like Vault may seem intimidating, but hopefully this post has convinced you otherwise. By leveraging Vault's flexible token helpers, we are able to customize the way local tokens are stored and retrieved. For a more advanced token helper that integrates with Mac OS Keychain Access, check out &lt;a href=&quot;https://github.com/sethvargo/vault-token-helper-osx-keychain&quot;&gt;sethvargo/vault-token-helper-osx-keychain on GitHub&lt;/a&gt;. We look forward to seeing what custom Vault token helpers you will build!&lt;/p&gt;&amp;#13;
</description>
<pubDate>Tue, 31 Oct 2017 00:00:00 +0000</pubDate>
<dc:creator>Seth Vargo</dc:creator>
<og:title>Building a Vault Token Helper</og:title>
<og:description>This post details the steps for building a custom Vault Token Helper for storing and retrieving Vault tokens for authentication locally.</og:description>
<og:image>https://www.datocms-assets.com/2885/1508475795-vault-social-share.png</og:image>
<og:type>article</og:type>
<dc:language>da</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hashicorp.com/blog/building-a-vault-token-helper</dc:identifier>
</item>
<item>
<title>Building a Vault Secure Plugin</title>
<link>http://www.hashicorp.com/blog/building-a-vault-secure-plugin</link>
<guid isPermaLink="true" >http://www.hashicorp.com/blog/building-a-vault-secure-plugin</guid>
<description>&lt;p&gt;Vault is an open source tool for managing secrets. Earlier we showcased how Vault provides &lt;a href=&quot;https://www.hashicorp.com/blog/how-vault-encrypts-application-data-during-transit-and-at-rest&quot;&gt;Encryption as a Service&lt;/a&gt; and how &lt;a href=&quot;https://www.hashicorp.com/blog/hashicorp-vault-helps-new-relic-manage-secrets-for-their-digital-intelligence-platform&quot;&gt;New Relic trusts HashiCorp Vault for their platform&lt;/a&gt;. This post explores extending Vault even further by writing custom auth plugins that work for both &lt;a href=&quot;https://www.vaultproject.io/&quot;&gt;Vault Open Source&lt;/a&gt; and &lt;a href=&quot;https://www.hashicorp.com/products/vault&quot;&gt;Vault Enterprise&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;vault-plugins&quot;&gt;&lt;a name=&quot;vault-plugins&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/building-a-vault-secure-plugin#vault-plugins&quot;&gt;»&lt;/a&gt; Vault Plugins&lt;/h2&gt;&amp;#13;
&lt;p&gt;Due to its secure nature, Vault's plugin system takes additional steps to ensure the plugin is fully trusted before use. In the previous post, we explored &lt;a href=&quot;https://www.hashicorp.com/blog/managing-google-calendar-with-terraform&quot;&gt;How to Extend Terraform with Custom Plugins&lt;/a&gt;. Vault's plugin system is conceptually similar to other HashiCorp tools like Terraform and Packer, but adds additional precautions and validation steps. Each plugin acts as a server, and Vault makes API calls to that server. This is done over a mutually-authenticated TLS connection, all on the local machine. The process is as follows:&lt;/p&gt;&amp;#13;
&lt;ol readability=&quot;8.8959074733096&quot;&gt;&lt;li readability=&quot;4&quot;&gt;&amp;#13;
&lt;p&gt;A Vault administrator registers a plugin the Vault's Plugin Catalog. The registration includes the path to the plugin binary on disk, the SHA256 checksum of the plugin binary, the name of the binary, and optionally the command to execute (defaults to the name of the plugin).&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;1&quot;&gt;&amp;#13;
&lt;p&gt;On execution, Vault verifies the plugin is registered (by name) in Vault's Plugin Catalog. Plugins must be registered in the catalog before use.&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;0&quot;&gt;&amp;#13;
&lt;p&gt;Vault ensures the checksum of the plugin on disk matches the registered checksum in the Plugin Catalog. This ensures the binary has not been tampered with or altered since installation.&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;0.91772151898734&quot;&gt;&amp;#13;
&lt;p&gt;Vault spawns the plugin, passing it a &lt;a href=&quot;https://www.vaultproject.io/docs/concepts/response-wrapping.html&quot;&gt;wrapped token&lt;/a&gt; containing TLS certificates and a private key. The wrapped token has exactly one use and a very small TTL.&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;1&quot;&gt;&amp;#13;
&lt;p&gt;The plugin unwraps the provided wrapped token and makes an API call to Vault to unwrap the provided token. The plugin extracts the unique TLS certificates and private key wrapped by the token. The plugin uses these TLS certificates and private key to start an RPC server encrypted with TLS.&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;-1&quot;&gt;&amp;#13;
&lt;p&gt;Vault and the plugin communicate via RPC over TLS using mutual TLS.&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;/ol&gt;&lt;p&gt;&lt;a href=&quot;https://www.datocms-assets.com/2885/1509133410-vault-secure-plugin-flow.svg&quot;&gt;&lt;img src=&quot;https://www.datocms-assets.com/2885/1509133410-vault-secure-plugin-flow.svg&quot; alt=&quot;Vault Plugin Flow&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;It is important to note that this process is handled automatically by the plugin package. Plugin authors do not need to implement this flow on their own. However, having a basic understanding of the plugin model is helpful in building custom Vault plugins.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;writing-a-vault-plugin&quot;&gt;&lt;a name=&quot;writing-a-vault-plugin&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/building-a-vault-secure-plugin#writing-a-vault-plugin&quot;&gt;»&lt;/a&gt; Writing a Vault Plugin&lt;/h2&gt;&amp;#13;
&lt;p&gt;All of the following code samples are available in full &lt;a href=&quot;https://github.com/hashicorp/vault-auth-plugin-example&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;p&gt;At present, there are three kinds of plugins - audit, auth, and secrets. Audit plugins are responsible for managing audit logs. Auth plugins are responsible for verifying user or machine-supplied information and mapping that identity to policy. Secrets plugins are responsible for generating, storing, or retrieving secrets. This post focuses on building an &lt;em&gt;auth&lt;/em&gt; plugin, but the concepts are largely applicable to all three kinds of Vault plugins.&lt;/p&gt;&amp;#13;
&lt;p&gt;Like most software projects, the first step in writing a Vault Plugin is research. It is important that you have an understanding of the API for which you are building a Vault plugin. Additionally, you should identify any client libraries which manages the authentication and interaction with the API in Golang (the language in which Vault plugins are written). This example post implements a dummy authentication plugin which verifies the user provided the proper shared secret code, so we do not need to learn the complexity of an upstream tool or API.&lt;/p&gt;&amp;#13;
&lt;p&gt;After you understand the API, some boilerplate code is required to get started. This code configures the binary to be a plugin, manages the TLS handshake describe above, and serves the proper plugin APIs.&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;highlight go&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apiClientMeta&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pluginutil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APIClientMeta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apiClientMeta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FlagSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tlsConfig&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apiClientMeta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetTLSConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tlsProviderFunc&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pluginutil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VaultPluginTLSProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tlsConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServeOpts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BackendFactoryFunc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TLSProviderFunc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tlsProviderFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fatal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logical&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BackendConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logical&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Backend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// TODO&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;First, create a &lt;code&gt;main&lt;/code&gt; function. This is the function that is executed when the binary is called. That function calls Vault's built-in &lt;code&gt;plugin.Serve&lt;/code&gt; call, which builds all the required plugin APIs, TLS connections, and RPC server. The &lt;code&gt;BackendFactoryFunc&lt;/code&gt; calls our local &lt;code&gt;Factory&lt;/code&gt; function, which is currently just a stub. The factory is responsible for setting up and configuring the plugin (sometimes called a &quot;backend&quot; internally), returning any errors that occur during setup.&lt;/p&gt;&amp;#13;
&lt;p&gt;Next, create the actual backend. Vault backends are implemented as interfaces, making it easy to write our own.&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;22&quot;&gt;
&lt;pre class=&quot;highlight go&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;framework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Backend&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Backend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logical&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BackendConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Backend&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;framework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Backend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BackendType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logical&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TypeCredential&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthRenew&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathAuthRenew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PathsSpecial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logical&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unauthenticated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;login&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Paths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;framework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
      &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;framework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;login&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;framework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FieldSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
          &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;framework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FieldSchema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
            &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;framework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TypeString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Callbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logical&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Operation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;framework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OperationFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
          &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logical&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UpdateOperation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathAuthLogin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;ul readability=&quot;12&quot;&gt;&lt;li readability=&quot;0&quot;&gt;&amp;#13;
&lt;p&gt;The &lt;code&gt;backend&lt;/code&gt; struct embeds the standard &lt;code&gt;framework.Backend&lt;/code&gt;. This allows our backend to inherit almost all the required functions and properties without writing more boilerplate code.&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;0&quot;&gt;&amp;#13;
&lt;p&gt;The backend itself declares its type - in this case &lt;code&gt;logical.TypeCredential&lt;/code&gt;. This tells Vault that the backend (plugin) is a credential (auth) provider.&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;3&quot;&gt;&amp;#13;
&lt;p&gt;Since this is an auth plugin, the &lt;code&gt;AuthRenew&lt;/code&gt; field is required. This points to a function which will handle requests to renew an auth from this backend. Note that we have not defined the &lt;code&gt;pathAuthRenew&lt;/code&gt; function yet, so this code will compile yet.&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;5&quot;&gt;&amp;#13;
&lt;p&gt;Almost every operation in Vault requires an authentication token. However, since we are building an auth plugin, we need to tell Vault to allow unauthenticated requests to our endpoint. The user will not have a token yet (that is what our auth plugin will be providing). We mark the &lt;code&gt;login&lt;/code&gt; endpoint as unauthenticated, meaning Vault will not require a Vault token to access this endpoint.&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;7&quot;&gt;&amp;#13;
&lt;p&gt;Lastly we define the path(s) for which this backend will respond. In this example, there is only one path - &lt;code&gt;login&lt;/code&gt;. Most backends will have multiple paths, each with different functionality. Inside the path, we define the fields (schema). These are the fields that Vault will expect as a JSON payload. In this example, we expect one field - &lt;code&gt;password&lt;/code&gt; as a string. Finally we define the collection of callbacks on this path, which are described more in detail below.&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;/ul&gt;&lt;p&gt;Each path defines a series of &quot;callbacks&quot;. A callback is a mapping of a request method (like &quot;create&quot;, &quot;read&quot;, &quot;update&quot;, or &quot;delete&quot;) to a path. In the example above, we mapped the &lt;code&gt;logical.UpdateOperation&lt;/code&gt; to the &lt;code&gt;pathAuthLogin&lt;/code&gt; method. This tells Vault to route any PUT/POST requests to the &lt;code&gt;pathAuthLogin&lt;/code&gt; method (which is not yet defined) with the parsed schema fields.&lt;/p&gt;&amp;#13;
&lt;p&gt;It is important to note that Vault itself handles the request parsing, authentication, and authorization of these paths. Notice that our plugin makes no use of policies or other authorization details. Vault handles this internally as part of the plugin model. Vault also gracefully handles any errors that occur in communication with the plugin. In this way, plugins are relatively unsophisticated in that they just present an API over the RPC interface. Vault itself does most of the heavy lifting.&lt;/p&gt;&amp;#13;
&lt;p&gt;To allow the code to compile, stub out the two methods discussed above:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;highlight go&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathAuthLogin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logical&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;framework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FieldData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logical&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// TODO&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathAuthRenew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logical&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;framework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FieldData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logical&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// TODO&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;The next section covers implementing the &quot;login&quot; functionality with &lt;code&gt;pathAuthLogin&lt;/code&gt;.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;implementing-login&quot;&gt;&lt;a name=&quot;implementing-login&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/building-a-vault-secure-plugin#implementing-login&quot;&gt;»&lt;/a&gt; Implementing Login&lt;/h2&gt;&amp;#13;
&lt;p&gt;The &quot;login&quot; path is unauthenticated. It is the plugin's responsibility to receive the payload from the request, parse, and process that information. If the result is successful, the method returns &quot;ok&quot; with some metadata. If the result is unsuccessful, the method returns an error which translates to &quot;unauthorized&quot; to the user. On success, Vault Core will handle the generation of the Vault Token and policy attachment based on our metadata response.&lt;/p&gt;&amp;#13;
&lt;p&gt;This auth plugin uses a shared secret value: &quot;super-secret-password&quot;. If the user supplies the correct password, they are authenticated. If the user does not provide the correct password, they are denied. Here is some sample code to accomplish this behavior:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;29&quot;&gt;
&lt;pre class=&quot;highlight go&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathAuthLogin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logical&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;framework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FieldData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logical&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subtle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConstantTimeCompare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;super-secret-password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logical&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrPermissionDenied&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SanitizeTTLStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;30s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;30s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Compose the response&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logical&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logical&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InternalData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
        &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;secret_value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abcd1234&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Policies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my-policy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;other-policy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Metadata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
        &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fruit&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;banana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LeaseOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logical&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LeaseOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TTL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Renewable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;ul readability=&quot;1.4557848194547&quot;&gt;&lt;li readability=&quot;0&quot;&gt;&amp;#13;
&lt;p&gt;Extract the &quot;password&quot; from the field schema. This comes from the &lt;code&gt;Fields&lt;/code&gt; declaration in the path section when we defined the backend above.&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;0&quot;&gt;&amp;#13;
&lt;p&gt;Perform an equality check to see if the user-supplied password matches are hard-coded passphrase. Note: you should not do this in production. This is example code only.&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;0&quot;&gt;&amp;#13;
&lt;p&gt;If the passwords match, return a &lt;code&gt;logical.Response&lt;/code&gt; with our metadata in the &lt;code&gt;Auth&lt;/code&gt; field.&lt;/p&gt;&amp;#13;
&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.hashicorp.com/blog/building-a-vault-secure-plugin#internaldata&quot;&gt;&lt;code&gt;InternalData&lt;/code&gt;&lt;/a&gt; is data that only our auth plugin will have access to. Neither other auth backends nor the user will see this data. It is common to store information that will be needed during the renew operation here. For example, if the user provided an API key for authentication, that key may be stored here and retrieved later when renewing the authentication.&lt;/li&gt;&amp;#13;
&lt;li&gt;&lt;a href=&quot;https://www.hashicorp.com/blog/building-a-vault-secure-plugin#policies&quot;&gt;&lt;code&gt;Policies&lt;/code&gt;&lt;/a&gt; is the list of policies the resulting token should have attached. In addition to the default policy, tokens created through this auth plugin will have the &quot;my-policy&quot; and &quot;other-policy&quot; policies automatically attached.&lt;/li&gt;&amp;#13;
&lt;li&gt;&lt;a href=&quot;https://www.hashicorp.com/blog/building-a-vault-secure-plugin#metadata&quot;&gt;&lt;code&gt;Metadata&lt;/code&gt;&lt;/a&gt; is arbitrary key-value metadata that is attached to the token. This information is visible to the user, so do not use it for internal storage.&lt;/li&gt;&amp;#13;
&lt;li&gt;&lt;a href=&quot;https://www.hashicorp.com/blog/building-a-vault-secure-plugin#leaseoptions&quot;&gt;&lt;code&gt;LeaseOptions&lt;/code&gt;&lt;/a&gt; inform both the user and Vault of the lifetime and the renewability of the resulting token. In this example, the TTL is hardcoded to 30 seconds. In a real plugin, this would likely be a configurable value.&lt;/li&gt;&amp;#13;
&lt;/ul&gt;&lt;/li&gt;&amp;#13;
&lt;/ul&gt;&lt;p&gt;The next section details how to compile, register, and run this plugin.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;testing-implementation&quot;&gt;&lt;a name=&quot;testing-implementation&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/building-a-vault-secure-plugin#testing-implementation&quot;&gt;»&lt;/a&gt; Testing Implementation&lt;/h2&gt;&amp;#13;
&lt;p&gt;Before going further, verify the plugin is behaving as expected by running it locally.&lt;/p&gt;&amp;#13;
&lt;ol readability=&quot;3.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;&amp;#13;
&lt;p&gt;Create a temporary directory to compile the plugin into and to use as the plugin directory for Vault:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /tmp/vault-plugins&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;0&quot;&gt;&amp;#13;
&lt;p&gt;Compile the plugin into the temporary directory:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;go build &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /tmp/vault-plugins/vault-auth-example&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;0&quot;&gt;&amp;#13;
&lt;p&gt;Create a configuration file to point Vault at this plugin directory:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tee /tmp/vault.hcl &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&amp;#13;
plugin_directory = &quot;/tmp/vault-plugins&quot;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&amp;#13;
&lt;/span&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;0&quot;&gt;&amp;#13;
&lt;p&gt;Start a Vault server in development mode with the configuration:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vault server &lt;span class=&quot;nt&quot;&gt;-dev&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-dev-root-token-id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;root&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/tmp/vault.hcl&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;-1&quot;&gt;&amp;#13;
&lt;p&gt;Leave this running and open a new tab or terminal window. Authenticate to Vault:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot;&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vault auth root&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;0.5&quot;&gt;&amp;#13;
&lt;p&gt;Calculate and register the SHA256 sum of the plugin in Vault's plugin catalog:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;SHASUM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;shasum &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; 256 &lt;span class=&quot;s2&quot;&gt;&quot;/tmp/vault-plugins/vault-auth-example&quot;&lt;/span&gt; | cut &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&amp;#13;
vault write sys/plugins/catalog/example-auth-plugin &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;nv&quot;&gt;sha_256&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SHASUM&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;vault-auth-example&quot;&lt;/span&gt;&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;-2&quot;&gt;&amp;#13;
&lt;p&gt;Enable the auth plugin:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vault auth-enable &lt;span class=&quot;nt&quot;&gt;-path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;example &lt;span class=&quot;nt&quot;&gt;-plugin-name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;example-auth-plugin plugin&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;/ol&gt;&lt;p&gt;At this point, the plugin is registered and enabled. To test the implementation, submit a login request with an invalid secret:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vault write auth/example/login &lt;span class=&quot;nv&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nope&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;The response will be &quot;permission denied&quot;:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight plaintext&quot;&gt;&amp;#13;
&lt;code&gt;Error writing data to auth/example/login: Error making API request.&amp;#13;
&amp;#13;
URL: PUT http://127.0.0.1:8200/v1/auth/example/login&amp;#13;
Code: 403. Errors:&amp;#13;
&amp;#13;
* permission denied&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;Now submit a login request with the correct shared secret:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vault write auth/example/login &lt;span class=&quot;nv&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;super-secret-password&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;The response will be successful and include the token and token metadata:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;9&quot;&gt;
&lt;pre class=&quot;highlight plaintext&quot;&gt;&amp;#13;
&lt;code&gt;Key                 Value&amp;#13;
---                 -----&amp;#13;
token               945fe08d-d9ab-63e9-d77b-7ed8e545d81d&amp;#13;
token_accessor      97986a4c-36d0-eff9-eddd-6ae5fd8c317b&amp;#13;
token_duration      30s&amp;#13;
token_renewable     true&amp;#13;
token_policies      [default my-policy other-policy]&amp;#13;
token_meta_fruit    &quot;banana&quot;&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;Notice that the authentication token expires in 30 seconds. If the user does not renew the token within 30 seconds, Vault will automatically revoke it. Again, this functionality is handled by Vault Core. The next section covers implementing the &quot;renew&quot; functionality with &lt;code&gt;pathAuthRenew&lt;/code&gt;.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;implementing-renew&quot;&gt;&lt;a name=&quot;implementing-renew&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/building-a-vault-secure-plugin#implementing-renew&quot;&gt;»&lt;/a&gt; Implementing Renew&lt;/h2&gt;&amp;#13;
&lt;p&gt;With the exception of root tokens, all tokens in Vault have a limited lifetime and require renewal. Just like the auth plugin is responsible for managing the authentication, the auth plugin is responsible for managing the renewal. Vault Core will handle the actual extension of the lease - the plugin just needs to return a &quot;yes&quot; or &quot;no&quot; as to whether the token should still be valid.&lt;/p&gt;&amp;#13;
&lt;p&gt;For example, suppose our auth plugin authenticated users via LDAP or ActiveDirectory. The internally stored data would include the user's username and password. On renew, the auth plugin should verify the user's stored credentials are still valid. It should also verify that no internal state (like policies) have changed. In this fictitious plugin, there is no external service, so it verifies integrity using the internal &lt;code&gt;&quot;secret_value&quot;&lt;/code&gt;.&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;21&quot;&gt;
&lt;pre class=&quot;highlight go&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathAuthRenew&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logical&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;framework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FieldData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logical&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Auth&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;request auth was nil&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secretValue&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InternalData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;secret_value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;secretValue&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;abcd1234&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;internal data does not match&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxTTL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SanitizeTTLStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;30s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;framework&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LeaseExtend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxTTL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;0&quot;&gt;&amp;#13;
&lt;p&gt;If the authentication was not present, the token cannot be renewed.&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;4&quot;&gt;&amp;#13;
&lt;p&gt;Extract the internal data and verify the data is still the same. If the data is different, this means the user is no longer valid. Again, as mentioned above, this would usually be an external API call to validate stored user credentials.&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li&gt;&amp;#13;
&lt;p&gt;Calculate the TTLs&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li&gt;&amp;#13;
&lt;p&gt;Extend the lease&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;/ul&gt;&lt;p&gt;As you can see, Vault is doing most of the computational work. Vault handles the routing, actual extension of the lease, and much more. The auth plugin simply verifies user or machine-supplied information.&lt;/p&gt;&amp;#13;
&lt;p&gt;As a final exercise, re-compile and run the plugin. Verify it can renew credentials:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight shell&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vault write auth/example/login &lt;span class=&quot;nv&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;super-secret-password&amp;#13;
Key                 Value&amp;#13;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;                 &lt;span class=&quot;nt&quot;&gt;-----&lt;/span&gt;&amp;#13;
token               b62420a6-ee83-22a4-7a15-a908af658c9f&amp;#13;
token_accessor      9eff2c4e-e321-3903-413e-a5084abb631e&amp;#13;
token_duration      30s&amp;#13;
token_renewable     &lt;span class=&quot;nb&quot;&gt;true&amp;#13;
&lt;/span&gt;token_policies      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;default my-policy other-policy]&amp;#13;
token_meta_fruit    &lt;span class=&quot;s2&quot;&gt;&quot;banana&quot;&lt;/span&gt;&amp;#13;
&amp;#13;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vault token-renew b62420a6-ee83-22a4-7a15-a908af658c9f&amp;#13;
Key                 Value&amp;#13;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;                 &lt;span class=&quot;nt&quot;&gt;-----&lt;/span&gt;&amp;#13;
token               b62420a6-ee83-22a4-7a15-a908af658c9f&amp;#13;
token_accessor      9eff2c4e-e321-3903-413e-a5084abb631e&amp;#13;
token_duration      30s&amp;#13;
token_renewable     &lt;span class=&quot;nb&quot;&gt;true&amp;#13;
&lt;/span&gt;token_policies      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;default my-policy other-policy]&amp;#13;
token_meta_fruit    &lt;span class=&quot;s2&quot;&gt;&quot;banana&quot;&lt;/span&gt;&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a name=&quot;conclusion&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/building-a-vault-secure-plugin#conclusion&quot;&gt;»&lt;/a&gt; Conclusion&lt;/h2&gt;&amp;#13;
&lt;p&gt;Extending a security tool like Vault may seem intimidating, but hopefully this post has convinced you otherwise. By leveraging Vault's plugin system, we are able to build extensible audit, auth, and secrets plugins to extend Vault's functionality. The source code for this example Vault plugin is available on &lt;a href=&quot;https://github.com/hashicorp/vault-auth-plugin-example&quot;&gt;GitHub&lt;/a&gt;, and you can view the source of more complex Vault plugins by looking at &lt;a href=&quot;https://github.com/hashicorp/vault&quot;&gt;Vault's source code on GitHub&lt;/a&gt; or the &lt;a href=&quot;https://github.com/sethvargo/vault-auth-slack&quot;&gt;Vault Auth Slack&lt;/a&gt; Vault Plugin which inspired this post. We look forward to seeing what custom Vault Plugins you build!&lt;/p&gt;&amp;#13;
&lt;p&gt;Interested a managed UI, cluster management, HSM integration, or multi-datacenter replication? Be sure to check out &lt;a href=&quot;https://www.hashicorp.com/products/vault&quot;&gt;Vault Enterprise&lt;/a&gt;.&lt;/p&gt;&amp;#13;
</description>
<pubDate>Mon, 30 Oct 2017 00:00:00 +0000</pubDate>
<dc:creator>Seth Vargo</dc:creator>
<og:title>Building a Vault Secure Plugin</og:title>
<og:description>This post explores extending Vault, a secrets management tool, by writing custom auth plugins that work for both Vault Open Source and Vault Enterprise.</og:description>
<og:image>https://www.datocms-assets.com/2885/1508475795-vault-social-share.png</og:image>
<og:type>article</og:type>
<dc:language>da</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hashicorp.com/blog/building-a-vault-secure-plugin</dc:identifier>
</item>
<item>
<title>Managing Google Calendar with Terraform</title>
<link>http://www.hashicorp.com/blog/managing-google-calendar-with-terraform</link>
<guid isPermaLink="true" >http://www.hashicorp.com/blog/managing-google-calendar-with-terraform</guid>
<description>&lt;p&gt;Terraform is an open source tool for managing Infrastructure as Code. Earlier this year, we showcased how Terraform pushes the boundaries on the traditional definition of &quot;infrastructure&quot;, enabling users to &lt;a href=&quot;https://www.hashicorp.com/blog/managing-github-with-terraform&quot;&gt;Manage GitHub Teams and Permissions with Terraform&lt;/a&gt;. This post explores extending Terraform even further by writing our own custom extension for managing events on Google Calendar.&lt;/p&gt;&lt;h2 id=&quot;why-terraform-&quot;&gt;&lt;a name=&quot;why-terraform-&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/managing-google-calendar-with-terraform#why-terraform-&quot;&gt;»&lt;/a&gt; Why Terraform?&lt;/h2&gt;&amp;#13;
&lt;p&gt;The benefits of managing Infrastructure as Code are fairly straightforward. By capturing infrastructure requirements and dependencies as code, users can codify, version, automate, audit, reuse, and release changes. Managing Google Calendar with Terraform provides the same benefits. As an added bonus, most humans understand calendars, and this shared foundational knowledge provides common ground for a discussion on extending Terraform with a custom &lt;a href=&quot;https://www.terraform.io/docs/providers/index.html&quot;&gt;Terraform Provider&lt;/a&gt;. While the previous post focused on why users might leverage Terraform to manage GitHub, this post focuses on how users can extend Terraform with custom extensions.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;core-vs-plugins&quot;&gt;&lt;a name=&quot;core-vs-plugins&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/managing-google-calendar-with-terraform#core-vs-plugins&quot;&gt;»&lt;/a&gt; Core vs. Plugins&lt;/h2&gt;&amp;#13;
&lt;p&gt;In order to comprehend both the importance and extensibility of Terraform Plugins, it is important to understand Terraform's architecture. Terraform has always had a plugin system, but early releases of Terraform were very limited. With more recent versions of the plugin system, there is a vibrant ecosystem of HashiCorp-maintained and third-party Terraform Plugins. Before &lt;a href=&quot;https://www.terraform.io/guides/terraform-provider-development-program.html&quot;&gt;writing our own plugin&lt;/a&gt;, we need to better understand how Terraform Core interacts with Terraform Plugins.&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://www.datocms-assets.com/2885/1509044297-terraform-google-calendar-plugin-architecture.svg&quot;&gt;&lt;img src=&quot;https://www.datocms-assets.com/2885/1509044297-terraform-google-calendar-plugin-architecture.svg&quot; alt=&quot;Terraform Plugin Architecture&quot;/&gt;&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;ul readability=&quot;8.0736882716049&quot;&gt;&lt;li readability=&quot;0.89285714285714&quot;&gt;&amp;#13;
&lt;p&gt;Terraform's &lt;strong&gt;Core&lt;/strong&gt; is responsible for reading configuration and building the dependency graph. Terraform relies heavily on modern graph theory for managing dependencies and adhering to ordering. &quot;Terraform Core&quot; is the actual &lt;a href=&quot;https://github.com/hashicorp/terraform&quot;&gt;Terraform project on GitHub&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;7.4391143911439&quot;&gt;&amp;#13;
&lt;p&gt;Terraform &lt;strong&gt;Plugins&lt;/strong&gt; are external single static binaries. During the planning and applying phases, Terraform's Core communicates with these plugins via an &lt;a href=&quot;https://en.wikipedia.org/wiki/Remote_procedure_call&quot;&gt;RPC interface&lt;/a&gt;. If you are unfamiliar with RPC, just imagine that the plugin is a server and Terraform Core makes API calls to that server. Terraform has many pluggable parts, but the most common type of plugin is a &lt;a href=&quot;https://www.terraform.io/docs/plugins/provider.html&quot;&gt;Terraform Provider Plugin&lt;/a&gt;. Terraform Provider Plugins implement resources with a basic CRUD (create, read, update, and delete) API for communicating with third party services.&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;5&quot;&gt;&amp;#13;
&lt;p&gt;Upstream APIs are third party, external services or APIs with which Terraform interacts. It is important to note that Terraform Core never interacts directly with these APIs. Instead, Terraform Core asks the Terraform Provider Plugin to perform an operation, and the plugin communicates with the upstream API. This provides a clear separation of concerns - Terraform Core does not need to know anything about API nuances and Terraform Provider Plugins do not need to know anything about graph theory.&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;/ul&gt;&lt;p&gt;The communication between Terraform Core and Terraform Plugins is almost completely transparent to users. If you inspect the process output (&lt;code&gt;ps aux | grep terraform&lt;/code&gt;) during an active plan or apply phase, you will see the parent process and multiple subprocess for the provider plugins. A typical interaction between Terraform Core and a Terraform Provider Plugin is as follows:&lt;/p&gt;&amp;#13;
&lt;ul&gt;&lt;li&gt;The user runs &lt;code&gt;terraform plan&lt;/code&gt;&lt;/li&gt;&amp;#13;
&lt;li&gt;Terraform Core loads the desired configuration from disk as well as the last-known state of resources&lt;/li&gt;&amp;#13;
&lt;li&gt;Terraform Core begins a refresh operation&lt;/li&gt;&amp;#13;
&lt;li&gt;As part of the refresh, Terraform Core instructs each Terraform Provider Plugin activated in the last-known state to perform a &lt;code&gt;Read&lt;/code&gt; on each resource&lt;/li&gt;&amp;#13;
&lt;li&gt;Each Terraform Provider Plugin returns this result to Terraform Core&lt;/li&gt;&amp;#13;
&lt;li&gt;Terraform Core calculates the difference, if any, between the last-known state and the current state&lt;/li&gt;&amp;#13;
&lt;li&gt;Terraform Core presents this difference as the output of the &lt;code&gt;terraform plan&lt;/code&gt; operation to user in their terminal&lt;/li&gt;&amp;#13;
&lt;/ul&gt;&lt;p&gt;Again, it is important to note that the Terraform Provider Plugins themselves only invoke upstream APIs for the basic CRUD operations - they are blissfully unaware of anything related to configuration loading, graph theory, etc. Because of the decoupling between Terraform Plugin Providers and Terraform Core, the work required of a provider is simpler and is merely an abstraction of a client library. This makes it super accessible to create providers without a deep knowledge of graph theory or infrastructure.&lt;/p&gt;&amp;#13;
&lt;p&gt;One final note is that Terraform Plugins generally consume an external client library as shown in the diagram above. While not impossible, it is highly discouraged to make a Terraform Provider Plugin also a client API library for the upstream API. Modern coding practices allow us to modularize for re-use, and we should follow those principles in Terraform as well. If your provider also requires a client library, it is best to separate these concerns into separate software projects.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;writing-a-terraform-provider-plugin&quot;&gt;&lt;a name=&quot;writing-a-terraform-provider-plugin&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/managing-google-calendar-with-terraform#writing-a-terraform-provider-plugin&quot;&gt;»&lt;/a&gt; Writing a Terraform Provider Plugin&lt;/h2&gt;&amp;#13;
&lt;p&gt;Like most software projects, the first step in writing a Terraform Provider Plugin is research. It is important that you have a solid foundational understanding of the API for which you are building a Terraform Provider Plugin. Additionally, you should identify an API client library (or write your own) that is a separate software project which manages the authentication and interaction with the API in Golang (the language in which Terraform Plugins are written).&lt;/p&gt;&amp;#13;
&lt;p&gt;After you understand the API, you will need to write some code to configure the &lt;em&gt;provider&lt;/em&gt;. You can think of the provider as an abstraction of the upstream API. The provider manages the communications between Terraform Core and upstream APIs. Providers can have one or more &lt;em&gt;resources&lt;/em&gt;. Resources are a component of a provider. For example, a provider might be an entire cloud (AWS, Google Cloud, Azure, etc), but a resource is a component of that cloud (AWS Instance, Google Cloud Firewall, Azure Storage Container, etc).&lt;/p&gt;&amp;#13;
&lt;p&gt;Some boilerplate code is required to get started. This code configures the binary to be a plugin and serve the proper plugin APIs. It also registers the provider and includes the upstream dependencies which do most of the hard work in creating the plugin APIs.&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;17&quot;&gt;
&lt;pre class=&quot;highlight go&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// main.go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// ... imports, etc.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServeOpts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProviderFunc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terraform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResourceProvider&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
      &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Provider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Provider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Provider&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Provider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResourcesMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
      &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;googlecalendar_event&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConfigureFunc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;providerConfigure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;providerConfigure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResourceData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// TODO&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;First, create a &lt;code&gt;main&lt;/code&gt; function. This is the function that is executed when the binary is called. That function calls Terraform's built-in &lt;code&gt;plugin.Serve&lt;/code&gt; call, which builds all the required plugin APIs and server. We simply return our provider, which we define in our &lt;code&gt;Provider()&lt;/code&gt; function. The &lt;code&gt;Provider()&lt;/code&gt; function declares the list of resources and an optional configure function. The list of resources are just strings mapped to function calls. In the example above, we map the &lt;code&gt;&quot;googlecalendar_event&quot;&lt;/code&gt; resource to the &lt;code&gt;resourceEvent()&lt;/code&gt; function call. Note that we have not defined that function call yet, so this code will not compile. The name of the resource should always be prefixed with the provider, and the name of the resource defined in this map will be the name of the resource users place in their Terraform configuration files, like so:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight hcl&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;googlecalendar_event&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;my_event&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;&amp;#13;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;Next, write the code to configure the provider. This varies heavily by provider and the API client library used. Since this Terraform provider uses the official Golang API client library for Google Cloud, we do not need any additional options and can utilize the default client.&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;16&quot;&gt;
&lt;pre class=&quot;highlight go&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;providerConfigure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResourceData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DefaultClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CalendarScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calendarSvc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calendarSvc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;The client library will automatically authenticate the local user with the gcloud CLI, environment variables, or a credentials file. Terraform delegates all this responsibility to the API client library, saving us the need to build and parse our own configuration object.&lt;/p&gt;&amp;#13;
&lt;p&gt;At this point, the Terraform Plugin and the Provider are configured and ready for use. However, the code still will not compile because we have not yet defined the &lt;code&gt;resourceEvent()&lt;/code&gt; function that defines the &lt;code&gt;&quot;googlecalendar_event&quot;&lt;/code&gt; resource.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;writing-a-resource&quot;&gt;&lt;a name=&quot;writing-a-resource&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/managing-google-calendar-with-terraform#writing-a-resource&quot;&gt;»&lt;/a&gt; Writing a Resource&lt;/h2&gt;&amp;#13;
&lt;p&gt;Recall from above that a resource is a component of a provider. To phrase that another way, resources &lt;em&gt;belong to&lt;/em&gt; a provider, and they have full access to the underlying client libraries to make the required API calls as instructed. Resources are usually defined in their own file, since most providers have multiple resources. This provides a clear separation between different resources and keeps the code neatly organized. Additionally, as a somewhat standard convention, resource files are named &lt;code&gt;resource_[thing].go&lt;/code&gt; where &quot;thing&quot; is the name of the resource.&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;18&quot;&gt;
&lt;pre class=&quot;highlight go&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// resource_event.go&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceEventCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceEventRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceEventUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceEventDelete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceEventCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResourceData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// TODO&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceEventRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResourceData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// TODO&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceEventUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResourceData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// TODO&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceEventDelete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResourceData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// TODO&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;Hopefully now it is abundantly clear that Terraform resources truly implement a CRUD API - create, read, update, and delete. Take note that all functions also return an &lt;code&gt;error&lt;/code&gt; object. Terraform is built to handle errors exceptionally well. As long as you have a well-behaved &lt;code&gt;Read&lt;/code&gt; operation, then you can return an error at any point and &lt;code&gt;terraform apply&lt;/code&gt; will gracefully handle the error. This again showcases the benefits of the separation of concerns between Terraform Core and Terraform Plugins. Terraform Core always makes the more difficult decisions of &lt;em&gt;what&lt;/em&gt; needs to be done and &lt;em&gt;when&lt;/em&gt; it needs to be done. The Terraform Plugin only needs to know about &lt;em&gt;how&lt;/em&gt; to perform the operation.&lt;/p&gt;&amp;#13;
&lt;p&gt;But before we can define any of those functions, we need to define the &lt;em&gt;schema&lt;/em&gt;. Every Terraform resource defines a schema - the list of arguments, attributes, types, legal values, etc. for the resource. This schema is loaded and used multiple times in Terraform's lifecycle, and it directly maps to the Terraform configuration files that users will write when using your Terraform Provider Plugin.&lt;/p&gt;&amp;#13;
&lt;p&gt;At this point, sometimes it is helpful to practice &quot;README-driven development&quot; or user-focused development. Before actually defining the schema, think about what API would make you happy as a user. I went through five different iterations before I settled on the API for the Terraform Google Calendar Provider. On your first pass, avoid the temptation to expose too much functionality or bring the complexity of the upstream API into the resource. Remember - Terraform is an abstraction framework. We want to give users power and flexibility, but we do not want to overload them with all the nuances of the upstream APIs.&lt;/p&gt;&amp;#13;
&lt;h3 id=&quot;defining-a-schema&quot;&gt;&lt;a name=&quot;defining-a-schema&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/managing-google-calendar-with-terraform#defining-a-schema&quot;&gt;»&lt;/a&gt; Defining a Schema&lt;/h3&gt;&amp;#13;
&lt;p&gt;After you have decided on what you want the user's definition to be, it is time to write the schema. The schema is just a mapping of a configuration key (a string) to a type and some metadata. For example, one of the required arguments for a Google Calendar event is the event summary or title. We can express this in the schema:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;12&quot;&gt;
&lt;pre class=&quot;highlight go&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;summary&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TypeString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;This tells Terraform's configuration loader to accept a &lt;code&gt;summary&lt;/code&gt; field in the Terraform configuration, that the field must be a string, and that the field is required. This translates to the following Terraform user configuration:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight hcl&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;googlecalendar_event&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;my_event&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;n&quot;&gt;summary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;My Special Event&quot;&lt;/span&gt;&amp;#13;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;Each field in the schema must have a type, and it must be explicitly marked as &lt;code&gt;Required&lt;/code&gt;, &lt;code&gt;Optional&lt;/code&gt;, or &lt;code&gt;Computed&lt;/code&gt;. Computed values are values that are only known &lt;em&gt;after&lt;/em&gt; the resource is created. For example, Google Calendar automatically assigns a unique event ID and hangout link to the event after it is created. These are not arguments that the creator can supply, nor are they known in advance. Therefore these options are &quot;computed&quot; and must be marked as such in the schema:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;15&quot;&gt;
&lt;pre class=&quot;highlight go&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;event_id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TypeString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Computed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hangout_link&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TypeString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Computed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;Marking a value as &lt;code&gt;Computed&lt;/code&gt; tells Terraform to disallow the user to set this value themselves:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight hcl&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Not allowed because &quot;event_id&quot; is computed&lt;/span&gt;&amp;#13;
&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;googlecalendar_event&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;my_event&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;n&quot;&gt;event_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;event-12ae48df&quot;&lt;/span&gt;&amp;#13;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;For more complex resources, you may need to create a resource within a resource as a &quot;Set&quot;. For example, event attendees (guests) must have an email address, but their attendance may be optional. One way we could define the user interface is like this:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;10&quot;&gt;
&lt;pre class=&quot;highlight hcl&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;googlecalendar_event&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;my_event&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;n&quot;&gt;required_attendees&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;s2&quot;&gt;&quot;jane@company.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&amp;#13;
&amp;#13;
  &lt;span class=&quot;n&quot;&gt;optional_attendees&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;s2&quot;&gt;&quot;joe@company.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&amp;#13;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;This would functionally work, but it creates a disconnect. Humans usually think in terms of attendee-attendance, not attendance-attendee. As such, a better experience would be to make each attendee a set like this:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight hcl&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;googlecalendar_event&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;my_event&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;n&quot;&gt;attendee&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jane@company.com&quot;&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&amp;#13;
&amp;#13;
  &lt;span class=&quot;n&quot;&gt;attendee&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;joe@company.com&quot;&lt;/span&gt;&amp;#13;
    &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&amp;#13;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;The Terraform schema definition for this type of field looks like this:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;23&quot;&gt;
&lt;pre class=&quot;highlight go&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;attendee&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TypeSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
       &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
          &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TypeString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
          &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
        &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;optional&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
          &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TypeBool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
          &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
          &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;Notice that the &quot;Type&quot; of the field is a &quot;set&quot;, and the element itself is another resource schema, exactly as we have been defining. In this manner, it is possible to create deeply-nested arguments and fields.&lt;/p&gt;&amp;#13;
&lt;h3 id=&quot;implementing-functionality&quot;&gt;&lt;a name=&quot;implementing-functionality&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/managing-google-calendar-with-terraform#implementing-functionality&quot;&gt;»&lt;/a&gt; Implementing Functionality&lt;/h3&gt;&amp;#13;
&lt;p&gt;Now that the schema is defined, it is time to implement the actual interactions with the upstream APIs. This blog post will only cover the &lt;code&gt;Create&lt;/code&gt; and &lt;code&gt;Read&lt;/code&gt; operations, but the &lt;a href=&quot;https://github.com/sethvargo/terraform-provider-googlecalendar&quot;&gt;code is on GitHub&lt;/a&gt; for all API methods to satisfy any curiosity.&lt;/p&gt;&amp;#13;
&lt;p&gt;To implement the &lt;code&gt;Create&lt;/code&gt; operation, complete the &lt;code&gt;resourceEventCreate&lt;/code&gt; function from above:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;highlight go&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceEventCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResourceData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;svc&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Summary&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;summary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;location&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;svc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;primary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventAPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceEventRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;First, extract the calendar service from the provider metadata. The metadata is an interface, so coerce it to the proper type. Next, build the calendar event from the schema. To access schema values, use the &lt;code&gt;Get&lt;/code&gt; function with the name of the schema field. Earlier we defined a schema field named &quot;summary&quot;, which is available as &lt;code&gt;d.Get(&quot;summary&quot;)&lt;/code&gt;. That value comes back as an interface, but since we declared the type as a string, coerce the value into a string with &lt;code&gt;.(string)&lt;/code&gt;. Next, call the API client library with the constructed event object, returning an errors that occur. Next, and most importantly, set the &quot;id&quot; of the resource internally. The &quot;id&quot; is stored in the state, and it's the single piece of information Terraform uses to identify this resource in the future. Finally, read the resource back from the API by calling the &lt;code&gt;resourceEventRead&lt;/code&gt; function (not yet defined).&lt;/p&gt;&amp;#13;
&lt;p&gt;As you can see, one of the primary jobs of the Terraform Provider Plugin is to map the schema onto the underlying API calls and visa-versa. The &lt;code&gt;resourceEventRead&lt;/code&gt; function looks very similar, except instead of putting values from the schema into the API, it puts values from the API into the schema:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;14&quot;&gt;
&lt;pre class=&quot;highlight go&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceEventRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResourceData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;svc&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;svc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Events&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;primary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;summary&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Summary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;location&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;Notice that the &lt;code&gt;Read&lt;/code&gt; operation pulls a fresh copy of the resource from the upstream API using the resource ID (&lt;code&gt;d.Id()&lt;/code&gt;). This ID is stored in the statefile and used to retrieve upstream information about the resource.&lt;/p&gt;&amp;#13;
&lt;h3 id=&quot;masking-complexity&quot;&gt;&lt;a name=&quot;masking-complexity&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/managing-google-calendar-with-terraform#masking-complexity&quot;&gt;»&lt;/a&gt; Masking Complexity&lt;/h3&gt;&amp;#13;
&lt;p&gt;When working with upstream APIs, you may find a single operation takes multiple requests, requires retries, or simply does not match the behavior users expect. The Google Calendar API is a perfect example of this anomaly. In Google Calendar, it is possible to create events that do not show as &quot;busy&quot; on a user's calendar. In the web interface, this is called &quot;Show me as&quot;:&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;img src=&quot;https://www.datocms-assets.com/2885/1509044298-terraform-google-calendar-show-me-as-available.png&quot; alt=&quot;Old Google Calendar UI&quot;/&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;In the newly-launched interface, it has been renamed to &quot;Busy&quot; and &quot;Free&quot;:&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;img src=&quot;https://www.datocms-assets.com/2885/1509044816-terraform-google-calendar-show-me-as-busy.png&quot; alt=&quot;New Google Calendar UI&quot;/&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;In both cases, the Google Calendar UI presents information very differently than the Google Calendar API. This particular field in the API is called &quot;transparency&quot;, and it accepts two possible values: &quot;opaque&quot; and &quot;transparent&quot;. I personally have never seen that terminology used in the Google Calendar UI, and it threw me for a loop.&lt;/p&gt;&amp;#13;
&lt;p&gt;If we chose to mirror the upstream API directly, we would bring this shock and complexity to the user. Instead, we can consciously choose to mask this complexity and make the Terraform API similar to what users already expect with the web interface.&lt;/p&gt;&amp;#13;
&lt;p&gt;Again, focusing on user-driven development, I decided that the best Terraform interface for this particular option was a boolean like this:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight hcl&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;googlecalendar_event&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;my_event&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&amp;#13;
  &lt;span class=&quot;n&quot;&gt;show_as_available&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# or false&lt;/span&gt;&amp;#13;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&amp;#13;
&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;To make this possible, we define this as a boolean field on the schema:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;13&quot;&gt;
&lt;pre class=&quot;highlight go&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;show_as_available&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schema&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TypeBool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;Internally, Terraform will need translate this field to and from the necessary Google Cloud API fields automatically. To accomplish this, write some tiny helper functions:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;11&quot;&gt;
&lt;pre class=&quot;highlight go&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boolToTransparency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;showAsAvailable&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;showAsAvailable&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;opaque&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transparent&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&amp;#13;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transparencyToBool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;opaque&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;transparent&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[WARN] unknown transparency: %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;When building the resource from user input, delegate to &lt;code&gt;boolToTransparency&lt;/code&gt;:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight go&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Transparency&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boolToTransparency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;show_as_available&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;When reading data back from the API to populate the resource, delegate to &lt;code&gt;transparencyToBool&lt;/code&gt;:&lt;/p&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;8&quot;&gt;
&lt;pre class=&quot;highlight go&quot;&gt;&amp;#13;
&lt;code&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;show_as_available&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transparencyToBool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Transparency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&amp;#13;
&lt;/span&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;p&gt;This adaptation does not change the behavior, but it masks some of the complexity of the upstream API by bringing the existing UX that Google Calendar users expect to Terraform. Small improvements like these can go a very long way in driving adoption for your Terraform Provider Plugin.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;conclusion&quot;&gt;&lt;a name=&quot;conclusion&quot; class=&quot;anchor&quot; href=&quot;https://www.hashicorp.com/blog/managing-google-calendar-with-terraform#conclusion&quot;&gt;»&lt;/a&gt; Conclusion&lt;/h2&gt;&amp;#13;
&lt;p&gt;Extending a tool as powerful as Terraform may seem intimidating, but hopefully this post has convinced you otherwise. By leveraging the existing Google Calendar APIs, we were able to build a custom Terraform Provider Plugin that extended Terraform's powerful DSL to create, update, and delete calendar events. The source code for the Terraform Google Calendar plugin is available on &lt;a href=&quot;https://github.com/sethvargo/terraform-provider-googlecalendar&quot;&gt;GitHub&lt;/a&gt;, and you can view the source for many other Terraform Provider Plugins on the &lt;a href=&quot;https://github.com/terraform-providers&quot;&gt;Terraform Providers GitHub Organization&lt;/a&gt;. The Terraform project also features a &lt;a href=&quot;https://www.terraform.io/guides/terraform-provider-development-program.html&quot;&gt;step-by-step guide for creating your own provider&lt;/a&gt;. We look forward to seeing what custom Terraform Plugins you build!&lt;/p&gt;&amp;#13;
</description>
<pubDate>Thu, 26 Oct 2017 00:00:00 +0000</pubDate>
<dc:creator>Seth Vargo</dc:creator>
<og:title>Managing Google Calendar with Terraform</og:title>
<og:description>This post details how easy it is to extend HashiCorp Terraform with new providers like Google Calendar. Learn about Terraform's plugin model, testing, and more.</og:description>
<og:image>https://www.datocms-assets.com/2885/1508475755-terraform-social-share.png</og:image>
<og:type>article</og:type>
<dc:language>da</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hashicorp.com/blog/managing-google-calendar-with-terraform</dc:identifier>
</item>
<item>
<title>Announcing the Terraform Recommended Practices Guide</title>
<link>http://www.hashicorp.com/blog/announcing-terraform-recommended-practices</link>
<guid isPermaLink="true" >http://www.hashicorp.com/blog/announcing-terraform-recommended-practices</guid>
<description>&lt;p&gt;Organizations of all sizes are adopting cloud-based services for application workloads. Using cloud-based services enables development teams to operate with a much greater degree of independence from the underlying operational constraints of infrastructure. For most organizations, this means navigating the transition from a relatively static pool of homogeneous infrastructure in dedicated data centers to a distributed fleet of servers spanning one or more cloud providers. We believe the best way to provision cloud-based infrastructure for these organizations is to take a collaborative approach, where teams of operators can all use infrastructure as code to create and manage the infrastructure.&lt;/p&gt;&lt;p&gt;HashiCorp Terraform enables you to safely and predictably write, plan, and provision infrastructure as code, creating the core workflow for provisioning. Organizations then use &lt;a href=&quot;https://www.hashicorp.com/products/terraform/&quot;&gt;Terraform Enterprise&lt;/a&gt; to enable collaboration and govern the responsibilities between that organization’s different teams, roles, applications, and deployment tiers.&lt;/p&gt;&amp;#13;
&lt;p&gt;This is a journey, and not every organization can jump directly to practicing collaborative infrastructure as code. It’s built on top of many other IT best practices, like using &lt;a href=&quot;https://www.hashicorp.com/blog/version-controlled-infrastructure-with-github-and-terraform/&quot;&gt;version-controlled infrastructure with GitHub&lt;/a&gt; and preventing manual changes. Organizations need to adopt these foundations before they can practice a collaborative infrastructure as code workflow. To help organizations navigate this transition, we have written a comprehensive &lt;a href=&quot;https://terraform.io/docs/enterprise-beta/guides/recommended-practices/index.html&quot;&gt;Terraform Recommended Practices&lt;/a&gt; guide in collaboration with &lt;a href=&quot;https://www.contino.io/&quot;&gt;Contino&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;whycollaborativeinfrastructureascode&quot;/&gt;&amp;#13;
&lt;p&gt;Why collaborative infrastructure as code&lt;/p&gt;&amp;#13;
&lt;p&gt;Amidst this transition to cloud, there are two types of challenges every organization faces when trying to improve their provisioning practices: technical complexity and organizational complexity.&lt;/p&gt;&amp;#13;
&lt;h3 id=&quot;technicalcomplexity&quot;/&gt;&amp;#13;
&lt;p&gt;Technical Complexity&lt;/p&gt;&amp;#13;
&lt;p&gt;Technical complexity refers to the heterogeneity operators have to deal with when provisioning IaaS, SaaS, and PaaS from various &lt;a href=&quot;https://www.terraform.io/docs/providers/index.html&quot;&gt;providers&lt;/a&gt; (private cloud, public cloud, and external services). This technical complexity makes it difficult for enterprises to scale infrastructure quickly or use infrastructure best suited to their workloads.&lt;/p&gt;&amp;#13;
&lt;p&gt;Terraform addresses this complexity by providing one workflow to provision resources on any provider. It uses a single core engine to read infrastructure as code configurations and determine the relationships between resources, then uses many &lt;a href=&quot;https://www.terraform.io/docs/providers/index.html&quot;&gt;provider plugins&lt;/a&gt; to create, modify, and destroy resources on the target infrastructure providers.&lt;/p&gt;&amp;#13;
&lt;h3 id=&quot;organizationalcomplexity&quot;/&gt;&amp;#13;
&lt;p&gt;Organizational Complexity&lt;/p&gt;&amp;#13;
&lt;p&gt;As infrastructure scales, it requires more teams to provision and manage it. For effective collaboration, it’s important to delegate ownership of infrastructure across these teams and empower them to work in parallel without conflict. This approach can decompose infrastructure in much the same way development teams transitioned from monolithic applications to microservices to manage scale. Infrastructure teams are transitioning from monolithic infrastructure to specific infrastructure workspaces (networking, storage and compute, monitoring, etc.) to efficiently manage infrastructure at scale.&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://www.hashicorp.com/products/terraform/&quot;&gt;Terraform Enterprise&lt;/a&gt; provides collaboration and governance functionality to safely manage infrastructure at scale. Workspace management enables a team of operators to &lt;a href=&quot;https://www.terraform.io/docs/enterprise-beta/getting-started/vcs.html&quot;&gt;connect to version control&lt;/a&gt; where infrastructure repositories are maintained, collaborate to create and update infrastructure, and perform &lt;a href=&quot;https://www.terraform.io/docs/enterprise-beta/getting-started/runs.html&quot;&gt;Terraform runs&lt;/a&gt;. To enable governance of infrastructure at scale, Terraform Enterprise allows the codification of provisioning policies using &lt;a href=&quot;https://www.hashicorp.com/sentinel/&quot;&gt;HashiCorp’s Sentinel policy as code framework&lt;/a&gt;. Policies are applied during a Terraform run to ensure infrastructure is compliant with business policy before provisioned.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;identifywhereyouareinthejourney&quot;/&gt;&amp;#13;
&lt;p&gt;Identify where you are in the journey&lt;/p&gt;&amp;#13;
&lt;p&gt;Before you can implement collaborative infrastructure as code workflows with Terraform Enterprise, you need to understand which practices you’re already using, and which ones you still need to implement.&lt;/p&gt;&amp;#13;
&lt;p&gt;The full documentation includes a set of questions to properly identify your operational maturity as it relates to infrastructure provisioning. This helps in identifying the next steps for your organization to move forward. The levels of operational maturity include: manual, semi-automated, infrastructure as code, and collaborative infrastructure as code.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;takingthenextstep&quot;/&gt;&amp;#13;
&lt;p&gt;Taking the next step&lt;/p&gt;&amp;#13;
&lt;p&gt;This blog is an introduction to the complete &lt;a href=&quot;https://terraform.io/docs/enterprise-beta/guides/recommended-practices/index.html&quot;&gt;Terraform Recommended Practices&lt;/a&gt; guide. Our goal for the guide is to meet organizations where they are today in their journey to collaborative infrastructure automation, and help them move on to the next stage of operational maturity. For example, if you are primarily provisioning infrastructure manually, your first goal is to begin using &lt;a href=&quot;https://www.terraform.io&quot;&gt;Terraform&lt;/a&gt; open source in a small, manageable subset of your infrastructure. Once you’ve gotten some initial success using Terraform, you’ll have reached the semi-automated stage of provisioning maturity, and can begin to scale up and expand your Terraform usage.&lt;/p&gt;&amp;#13;
&lt;p&gt;This guide is a collaboration between HashiCorp and one of our system integration partners, &lt;a href=&quot;https://www.contino.io/&quot;&gt;Contino&lt;/a&gt;, who has expertise working with organizations at many different levels of organizational maturity with respect to collaboration, infrastructure as code, and Terraform.&lt;/p&gt;&amp;#13;
&lt;p&gt;For more information on Terraform Enterprise or to get started with your free trial, visit the &lt;a href=&quot;https://www.hashicorp.com/products/terraform/&quot;&gt;Terraform product page&lt;/a&gt;.&lt;/p&gt;&amp;#13;
</description>
<pubDate>Thu, 19 Oct 2017 00:00:00 +0000</pubDate>
<dc:creator>Maciej Skierkowski</dc:creator>
<og:title>Announcing Terraform Recommended Practices</og:title>
<og:description>We have written a comprehensive Terraform recommended practices guide in collaboration with Contino.</og:description>
<og:image>https://www.datocms-assets.com/2885/1508475755-terraform-social-share.png</og:image>
<og:type>article</og:type>
<dc:language>pt</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hashicorp.com/blog/announcing-terraform-recommended-practices</dc:identifier>
</item>
<item>
<title>HashiCorp Consul 1.0</title>
<link>http://www.hashicorp.com/blog/hashicorp-consul-1-0</link>
<guid isPermaLink="true" >http://www.hashicorp.com/blog/hashicorp-consul-1-0</guid>
<description>&lt;p&gt;Today we are excited to announce the public availability of &lt;a href=&quot;https://www.consul.io/&quot;&gt;HashiCorp Consul 1.0&lt;/a&gt;. Consul is a tool for service discovery and runtime configuration for distributed applications and infrastructure. Consul joins Vagrant and Packer as the third HashiCorp product to reach the 1.0 milestone.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.consul.io/downloads.html&quot; class=&quot;cta-btn&quot;&gt;Download Now &lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;The product has added significant functionality since it was released in April 2014 and today is used on millions of machines across many of the world's largest companies like SAP, Comcast, and Citadel. Consul 1.0 highlights include HCL configuration files and many smaller improvements, fixes, and cleaned up interfaces. Consul 1.0 Enterprise is highlighted by &lt;a href=&quot;https://www.consul.io/docs/enterprise/sentinel/index.html&quot;&gt;Sentinel integration&lt;/a&gt; to enforce policies on Consul's key/value store and service registration. For more information on Consul Enterprise visit &lt;a href=&quot;https://www.hashicorp.com/products/consul/&quot;&gt;https://www.hashicorp.com/products/consul/&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;p&gt;You can find the full list of changes in all Consul releases leading up to 1.0 in the &lt;a href=&quot;https://github.com/hashicorp/consul/blob/v1.0.0/CHANGELOG.md&quot;&gt;Changelog&lt;/a&gt;. There are a number of breaking changes in this release, so please be sure to read the &lt;a href=&quot;https://www.consul.io/docs/upgrade-specific.html#consul-1-0&quot;&gt;upgrade notes for 1.0&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;hashicorpconsul&quot;/&gt;&amp;#13;
&lt;p&gt;HashiCorp Consul&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://www.hashicorp.com/blog/consul-announcement/&quot;&gt;Consul 0.1 was released in 2014&lt;/a&gt; to address the challenges of running and maintaining a microservices architecture. Since that initial release, Consul has consistently added new functionality to make it easier to build robust service oriented applications. The Consul open source offering addresses the technical core challenges of service discovery, monitoring, coordination, and runtime configuration, while the Consul Enterprise offering addresses the organizational challenges of collaboration and governance.&lt;/p&gt;&amp;#13;
&lt;p&gt;Prior to Consul, organizations built homegrown service discovery solutions to connect their growing number of dynamic microservices. Consul provides a rich set of features for managing services with a design that is distributed, highly available, and scales to thousands of nodes and services across multiple datacenters.&lt;/p&gt;&amp;#13;
&lt;p&gt;Consul is part of the HashiCorp product suite that enables you to provision, secure, connect, and run any infrastructure for any application. Consul can be used by each component of the modular suite — Nomad can use Consul to register services, Vault can use Consul as a highly-available storage backend, and Terraform can set Consul configuration using infrastructure as code.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;teamandcommunity&quot;/&gt;&amp;#13;
&lt;p&gt;Team and Community&lt;/p&gt;&amp;#13;
&lt;p&gt;We want to thank our community and the Consul core team for bringing Consul to 1.0! HashiCorp Consul has over 360 contributors since it began 3 years ago. These contributors have added features, fixed bugs, and helped Consul grow over the years. The community's testing, improvements, and suggestions have made Consul what it is today.&lt;/p&gt;&amp;#13;
&lt;p&gt;At HashiCorp, James Phillips has led the charge towards 1.0. He became engineering lead of the project in 2015 and has been the primary maintainer ever since. James is joined by Kyle Havlovitz, Frank Schröder, and Preetha Appan. HashiCorp Research has also contributed through Lifeguard—&lt;a href=&quot;https://www.hashicorp.com/blog/making-gossip-more-robust-with-lifeguard/&quot;&gt;Making Gossip More Robust with Lifeguard&lt;/a&gt;—thanks to Jon Currey and Armon Dadgar. Together, this team continues to develop Consul and make it a trusted component of modern application architectures.&lt;/p&gt;&amp;#13;
&lt;h2 id=&quot;lookingforward&quot;/&gt;&amp;#13;
&lt;p&gt;Looking Forward&lt;/p&gt;&amp;#13;
&lt;p&gt;The release of Consul 1.0 is a huge milestone. HashiCorp takes the 1.0 designation very seriously and previously discussed what a 1.0 milestone means in the &lt;a href=&quot;https://www.hashicorp.com/blog/packer-1-0/&quot;&gt;HashiCorp Packer 1.0&lt;/a&gt; announcement. We feel that Consul has hit a threshold of broad usage, feature richness, and operational maturity to be labeled as such. However, this does not mean that Consul is done. Since 2014, infrastructure has continued to evolve and Consul must adapt as well. We look forward to sharing more as Consul advances past this milestone!&lt;/p&gt;&amp;#13;
</description>
<pubDate>Mon, 16 Oct 2017 00:00:00 +0000</pubDate>
<dc:creator>James Phillips</dc:creator>
<og:title>HashiCorp Consul 1.0</og:title>
<og:description>HashiCorp enables organizations to have consistent workflows to provision, secure, connect, and run any infrastructure for any application.</og:description>
<og:image>https://www.datocms-assets.com/2885/1508522484-share.jpg</og:image>
<og:type>article</og:type>
<dc:language>fr</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hashicorp.com/blog/hashicorp-consul-1-0</dc:identifier>
</item>
<item>
<title>HashiCorp Vault 0.8.3</title>
<link>http://www.hashicorp.com/blog/hashicorp-vault-0-8-3</link>
<guid isPermaLink="true" >http://www.hashicorp.com/blog/hashicorp-vault-0-8-3</guid>
<description>&lt;p&gt;We are pleased to announce the release of HashiCorp Vault 0.8.3. Vault provides security teams and infrastructure operators with secrets management solutions, encryption as a service, and privileged access enforcement. The highlight of the latest release is a Kubernetes authentication backend. For Vault Enterprise, we are also releasing an integration with &lt;a href=&quot;https://hashicorp.com/sentinel&quot;&gt;Sentinel&lt;/a&gt;, HashiCorp's policy as code framework announced at HashiConf.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.vaultproject.io/downloads.html&quot; class=&quot;cta-btn&quot;&gt;Download Now &lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;Features introduced in this release include:&lt;/p&gt;&amp;#13;
&lt;ul&gt;&lt;li&gt;Kubernetes Auth Backend&lt;/li&gt;&amp;#13;
&lt;li&gt;Sentinel policy as code integration&lt;/li&gt;&amp;#13;
&lt;/ul&gt;&lt;p&gt;The release also includes additional enhancements to MFA and PKI, as well as bug fixes.&lt;/p&gt;&amp;#13;
&lt;p&gt;Kubernetes Auth Backend&lt;/p&gt;&amp;#13;
&lt;p&gt;Vault 0.8.3 introduces native Kubernetes auth backend that allows &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/pods/pod/#what-is-a-pod&quot;&gt;Kubernetes pods&lt;/a&gt; to directly receive and use Vault auth tokens without additional integration components.&lt;/p&gt;&amp;#13;
&lt;p&gt;Prior to 0.8.3, a user accessing Vault via a pod required significant preparation work using an init pod or other custom interface. With the release of the Kubernetes auth backend, Vault now provides a production-ready interface for Kubernetes that allows a pod to authenticate with Vault via a JWT token from a pod’s service account.&lt;/p&gt;&amp;#13;
&lt;p&gt;View the &lt;a href=&quot;https://www.vaultproject.io/docs/auth/kubernetes.html&quot;&gt;documentation&lt;/a&gt; for more information on the Kubernetes auth backend.&lt;/p&gt;&amp;#13;
&lt;p&gt;For more information on the collaboration between Google and HashiCorp Vault, check out “&lt;a href=&quot;https://cloudplatform.googleblog.com/2017/09/HashiCorp-and-Google-expand-collaboration-easing-secret-and-infrastructure-management.html&quot;&gt;Secret and infrastructure management made easy with HashiCorp and Google Cloud&lt;/a&gt;” and “&lt;a href=&quot;https://opensource.googleblog.com/2017/09/authenticating-to-hashicorp-vault-using-gce-signed-metadata.html&quot;&gt;Authenticating to Hashicorp Vault using GCE Signed Metadata&lt;/a&gt;” published by Google.&lt;/p&gt;&amp;#13;
&lt;p&gt;Multi-factor Authentication Improvements&lt;/p&gt;&amp;#13;
&lt;p&gt;We have expanded MFA capabilities within Vault, with identity metadata now available in the &lt;em&gt;username&lt;/em&gt; format. Additionally, &lt;a href=&quot;https://www.vaultproject.io/api/auth/okta/index.html&quot;&gt;Okta MFA&lt;/a&gt; providers may now configure custom &lt;code&gt;base_url&lt;/code&gt; variables for API calls.&lt;/p&gt;&amp;#13;
&lt;p&gt;PKI Improvements&lt;/p&gt;&amp;#13;
&lt;p&gt;We have also expanded Vault PKI capabilities; &lt;a href=&quot;https://www.vaultproject.io/api/secret/pki/index.html#sign-intermediate&quot;&gt;Sign Intermediate&lt;/a&gt; will now allow specifying a &lt;a href=&quot;https://www.vaultproject.io/api/secret/pki/index.html#ttl-3&quot;&gt;TTL&lt;/a&gt; value longer than the signing CA certificate's &lt;code&gt;NotAfter&lt;/code&gt; value, allowing for flexible policy management for Vault-distributed certificates.&lt;/p&gt;&amp;#13;
&lt;p&gt;Sentinel Policy Integration (Beta Functionality)&lt;/p&gt;&amp;#13;
&lt;p&gt;Note: This is a Vault Enterprise Premium feature.&lt;/p&gt;&amp;#13;
&lt;p&gt;We recently announced a new policy as code framework, &lt;a href=&quot;https://hashicorp.com/sentinel/&quot;&gt;Sentinel&lt;/a&gt;, to enable fine-grained, logic-based policy decisions that can be extended to source external information. This is an important part of creating and enforcing security constraints for infrastructure automation across a company. This release integrates Sentinel policies with Vault’s secret infrastructure in order to provide more control and depth to Vault's security model and policy system, while enforcing security and best practices requirements.&lt;/p&gt;&amp;#13;
&lt;p&gt;Sentinel policies are enforced in two key areas:&lt;/p&gt;&amp;#13;
&lt;p&gt;For more information on Sentinel, see the &lt;a href=&quot;https://docs.hashicorp.com/sentinel/&quot;&gt;Sentinel documentation&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;p&gt;For a full list of changes, check out the &lt;a href=&quot;https://github.com/hashicorp/vault/blob/v0.8.3/CHANGELOG.md&quot;&gt;Vault 0.8.3 changelog&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;p&gt;Upgrade Notes&lt;/p&gt;&amp;#13;
&lt;p&gt;As always, please test in an isolated environment before upgrading and follow &lt;a href=&quot;https://www.vaultproject.io/guides/upgrading/index.html&quot;&gt;Vault's Upgrade Guide&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;p&gt;For more information on changes, see the full &lt;a href=&quot;https://github.com/hashicorp/vault/blob/v0.8.3/CHANGELOG.md&quot;&gt;Vault 0.8.3 changelog&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;p&gt;Thank you again to the Vault community for their ideas, bug reports, and pull requests!&lt;/p&gt;&amp;#13;
&lt;p&gt;To download the latest release go to &lt;a href=&quot;https://www.vaultproject.io/downloads.html&quot;&gt;https://www.vaultproject.io/downloads.html&lt;/a&gt;. For those interested in learning more about HashiCorp Vault Enterprise, visit &lt;a href=&quot;https://www.hashicorp.com/products/vault/&quot;&gt;https://www.hashicorp.com/products/vault/&lt;/a&gt;.&lt;/p&gt;&amp;#13;
</description>
<pubDate>Tue, 19 Sep 2017 00:00:00 +0000</pubDate>
<dc:creator>Andy Manoske</dc:creator>
<og:title>HashiCorp Vault 0.8.3</og:title>
<og:description>HashiCorp enables organizations to have consistent workflows to provision, secure, connect, and run any infrastructure for any application.</og:description>
<og:image>https://www.datocms-assets.com/2885/1508522484-share.jpg</og:image>
<og:type>article</og:type>
<dc:language>fr</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hashicorp.com/blog/hashicorp-vault-0-8-3</dc:identifier>
</item>
<item>
<title>Announcing Sentinel, HashiCorp’s Policy as Code Framework</title>
<link>http://www.hashicorp.com/blog/sentinel-announcement-policy-as-code-framework</link>
<guid isPermaLink="true" >http://www.hashicorp.com/blog/sentinel-announcement-policy-as-code-framework</guid>
<description>&lt;p&gt;Today at HashiConf we released &lt;a href=&quot;https://www.hashicorp.com/sentinel&quot;&gt;Sentinel&lt;/a&gt;. Sentinel is an embedded policy as code framework in the &lt;a href=&quot;https://www.hashicorp.com&quot;&gt;HashiCorp Enterprise products&lt;/a&gt; to enable fine-grained, logic-based policy decisions that can be extended to source external information to make decisions.&lt;/p&gt;&lt;p&gt;Policy as Code&lt;/p&gt;&amp;#13;
&lt;p&gt;Our suite of infrastructure automation products to provision, secure, connect, and run any infrastructure empowers users to create and manage infrastructure. They are built on a foundation of infrastructure as code to codify and automate infrastructure management at scale. This ability to create, change, and destroy infrastructure at scale comes with risks in large organizations as less experienced users or incorrectly configured automation can make significant mistakes that impact business operations.&lt;/p&gt;&amp;#13;
&lt;p&gt;Sentinel introduces &lt;a href=&quot;https://docs.hashicorp.com/sentinel/concepts/policy-as-code&quot;&gt;policy as code&lt;/a&gt; as a powerful framework built-in to HashiCorp Enterprise tooling to allow guardrails, business requirements, legal compliance, and more to be actively enforced by running systems in real-time.&lt;/p&gt;&amp;#13;
&lt;p&gt;Sentinel limits exposure by codifying business and regulatory policies to ensure infrastructure changes are safe. Together infrastructure as code and policy as code empower users to safely automate infrastructure management.&lt;/p&gt;&amp;#13;
&lt;p&gt;Sentinel&lt;/p&gt;&amp;#13;
&lt;p&gt;Most systems today have some degree of access control. You are able to define identities and what they have access to. These ACL systems solve an immediate and necessary problem of locking down a system in very broad strokes. Sentinel is a reusable system for more advanced software policy decisions. Sentinel enables:&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Policy as Code.&lt;/strong&gt; Treat policy like an application — version control, code review, test, and automate. High level logic and traditional programming constructs can determine policy decisions beyond the limited constraints of typical ACL systems. The Sentinel Simulator provides a way to develop and test policies locally, outside of the systems they execute in.&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Fine-grained, condition-based policy.&lt;/strong&gt; Reject actions on any available input rather than coarse-grained read, write, and admin policies. Make policy decisions conditional on request data or sourced from external systems.&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Embedded.&lt;/strong&gt; Sentinel is embedded within HashiCorp products. Once you upgrade your enterprise HashiCorp product to the next version, it will be Sentinel-enabled. This enables policy enforcement in the data path to actively reject violating behavior.&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Multiple Enforcement Levels.&lt;/strong&gt; Advisory, soft-mandatory, and hard-mandatory levels allow policy writers to warn on or reject offending behavior with the appropriate severity. Soft mandatory policies can be overridden with sufficient permissions, but provide an audit trail and non-repudiation.&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;External Information.&lt;/strong&gt; Source external information to make holistic policy decisions. Plugins to access external information from custom systems can be written by anyone using the public Sentinel SDK. For example, a HashiCorp Terraform policy can be written to disallow infrastructure change while HashiCorp Consul health checks are failing. This allows Sentinel to be integrated into existing workflows and tools such as change management systems.&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Multi-cloud Compatible.&lt;/strong&gt; Ensure infrastructure changes are within business and regulatory policy on every infrastructure provider. Sentinel uses the same powerful language and workflow with every cloud provider.&lt;/p&gt;&amp;#13;
&lt;p&gt;Example Sentinel policies&lt;/p&gt;&amp;#13;
&lt;p&gt;Sentinel is embedded within Terraform Enterprise, Vault Enterprise, Consul Enterprise, and Nomad Enterprise to add a layer of fine-grained policy enforcement. Sentinel builds upon and naturally extends the existing ACL systems.&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Terraform&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;Sentinel policies are enforced between a Terraform plan and Terraform apply. This allows users to first show what infrastructure changes will happen with a plan, validate those changes with Sentinel, and then apply the changes if they pass the policy check. The policies have access to the Terraform plan, state, and configuration. Here are some examples:&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Example: Do not allow resources to be provisioned without tags.&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;pre readability=&quot;4&quot;&gt;&amp;#13;
&lt;br/&gt;&lt;code readability=&quot;2&quot;&gt;import &quot;tfplan&quot;&lt;p&gt;main = rule {&amp;#13;
all tfplan.resources as r {&amp;#13;
  r.attr contains &quot;tags&quot; and&amp;#13;
  length(r.attr.tags) &amp;gt; 0&amp;#13;
}&amp;#13;
}&lt;/p&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Example: Limit Google Cloud compute resources to anything below &lt;code&gt;n1-standard-16&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;pre readability=&quot;7&quot;&gt;&amp;#13;
&lt;br/&gt;&lt;code readability=&quot;8&quot;&gt;import &quot;tfplan&quot;&lt;p&gt;allowed_machine_types = [&amp;#13;
&quot;n1-standard-1&quot;,&amp;#13;
&quot;n1-standard-2&quot;,&amp;#13;
&quot;n1-standard-4&quot;,&amp;#13;
&quot;n1-standard-8&quot;,&amp;#13;
]&lt;/p&gt;&lt;p&gt;main = rule {&amp;#13;
all tfplan.resources as r {&amp;#13;
    r.attr.machine_type in allowed_machine_types&amp;#13;
}&amp;#13;
}&lt;/p&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Vault&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;Vault exposes Sentinel in two different contexts: Role Governing Policies (RGP) and Endpoint Governing Policies (EGP). RGPs add an additional layer of fine-grained logic to the existing role-based access controls within Vault. EGPs are enforced in front of specified Vault APIs across all roles and add an additional layer of global policy to Vault. The global enforcement of EGPs simplifies regulatory compliance by providing mandatory, auditable policy enforcement. Both provide more control and depth to Vault's security model and policy system.&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Example: Ensure that any token generated more than four hours ago cannot be used on any endpoint.&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;pre readability=&quot;4&quot;&gt;&amp;#13;
&lt;br/&gt;&lt;code readability=&quot;2&quot;&gt;import &quot;time&quot;&lt;p&gt;main = rule {&amp;#13;
time.now.sub(time.load(token.creation_time)) &amp;lt; 4 * time.hour&amp;#13;
}&lt;/p&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Example: When logging into LDAP, Ping MFA is required and the request must come from the internal IP address space.&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;pre readability=&quot;7&quot;&gt;&amp;#13;
&lt;br/&gt;&lt;code readability=&quot;8&quot;&gt;import &quot;sockaddr&quot;&lt;p&gt;// We expect logins to come only from our private IP range&amp;#13;
cidrcheck = rule {&amp;#13;
sockaddr.is_contained(request.connection.remote_addr, &quot;10.20.0.0/16&quot;)&amp;#13;
}&lt;/p&gt;&lt;p&gt;// Require MFA along with LDAP credentials&amp;#13;
ping_valid = rule {&amp;#13;
mfa.ping.is_valid&amp;#13;
}&lt;/p&gt;&lt;p&gt;main = rule when request.path is &quot;auth/ldap/login&quot; {&amp;#13;
ping_valid and cidrcheck&amp;#13;
}&amp;#13;
&lt;/p&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Consul&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;Sentinel policies are enforced on Consul K/V and services modifications. Future versions of Consul will extend Sentinel coverage across more endpoints.&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Example: Key/value must be in proper format (such as integer, text, etc.).&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;pre readability=&quot;7.5&quot;&gt;&amp;#13;
&lt;br/&gt;&lt;code readability=&quot;9&quot;&gt;required = [&amp;#13;
[&quot;port&quot;, &quot;\d+&quot;], // port must be int&amp;#13;
[&quot;name&quot;, &quot;\w+&quot;], // name must be one or more words&amp;#13;
]&lt;p&gt;valid_key = func() {&amp;#13;
for required as v {&amp;#13;
  if request.kv.key is v[0] {&amp;#13;
    return request.kv.value matches v[1]&amp;#13;
  }&amp;#13;
}&lt;/p&gt;&lt;p&gt;// Unknown key&amp;#13;
return false&amp;#13;
}&lt;/p&gt;&lt;p&gt;is_kv_request = rule {&amp;#13;
request.path matches &quot;&lt;sup&gt;/kv&quot;&lt;/sup&gt; and&amp;#13;
request.method is &quot;PUT&quot;&amp;#13;
}&lt;/p&gt;&lt;p&gt;main = rule when is_kv_request { valid_key() }&lt;/p&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Example: Consul keys can only be updated during business hours&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;pre readability=&quot;4&quot;&gt;&amp;#13;
&lt;br/&gt;&lt;code readability=&quot;2&quot;&gt;import &quot;time&quot;&lt;p&gt;main = rule { time.hour &amp;gt; 8 and time.hour &amp;lt; 17 }&lt;/p&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Nomad&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;Sentinel policies in Nomad are enforced before accepting new jobs or updating existing jobs. Policies can additionally enforce that only trusted artifacts or applications are allowed to run.&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Example: Only allow Docker workloads.&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;pre readability=&quot;4&quot;&gt;&amp;#13;
&lt;br/&gt;&lt;code readability=&quot;2&quot;&gt;allowed_drivers = [&quot;docker&quot;]&lt;p&gt;main = rule {&amp;#13;
all job.task_groups as tg {&amp;#13;
    all tg.tasks as t { t.driver in allowed_drivers }&amp;#13;
}&amp;#13;
}&lt;/p&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Example: Limit jobs to only 5 GB of memory resources.&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;pre readability=&quot;5&quot;&gt;&amp;#13;
&lt;br/&gt;&lt;code readability=&quot;4&quot;&gt;func sum_tasks(tg) {&amp;#13;
count = 0&amp;#13;
for tg.tasks as t { count += t.resources.memory else 0 }&amp;#13;
return count&amp;#13;
}&lt;p&gt;func sum_job(job) {&amp;#13;
count = 0&amp;#13;
for job.task_groups as tg {&amp;#13;
    if tg.count &amp;lt; 0 {&amp;#13;
        fail(&quot;unreasonable count value: %d&quot;, tg.count)&amp;#13;
    }&lt;/p&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight plaintext&quot;&gt;&amp;#13;
&lt;code&gt;&lt;code&gt;count += sumTasks(tg) * tg.count&amp;#13;
&lt;/code&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;pre&gt;&amp;#13;
&lt;br/&gt;}&amp;#13;
&lt;br/&gt;return count&amp;#13;
}&amp;#13;
&lt;br/&gt;main = rule { sum_job(job) &amp;lt;= 5000 }&amp;#13;
&lt;/pre&gt;&amp;#13;
&lt;p&gt;Conclusion&lt;/p&gt;&amp;#13;
&lt;p&gt;Sentinel and policy as code are important additions to the HashiCorp product suite. We're excited to see how customers use the flexible language to enforce policies and enable more users to safely provision, secure, connect, and run any infrastructure for any application.&lt;/p&gt;&amp;#13;
&lt;p&gt;Learn more about Sentinel at &lt;a href=&quot;https://www.hashicorp.com/sentinel&quot;&gt;https://www.hashicorp.com/sentinel&lt;/a&gt;.&lt;/p&gt;&amp;#13;
</description>
<pubDate>Tue, 19 Sep 2017 00:00:00 +0000</pubDate>
<dc:creator>Mitchell Hashimoto</dc:creator>
<og:title>Announcing Sentinel, HashiCorp’s Policy as Code Framework</og:title>
<og:description>HashiCorp enables organizations to have consistent workflows to provision, secure, connect, and run any infrastructure for any application.</og:description>
<og:image>https://www.datocms-assets.com/2885/1508522484-share.jpg</og:image>
<og:type>article</og:type>
<dc:language>fr</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hashicorp.com/blog/sentinel-announcement-policy-as-code-framework</dc:identifier>
</item>
<item>
<title>HashiCorp Announcements at HashiConf 2017</title>
<link>http://www.hashicorp.com/blog/hashicorp-announcements-hashiconf-2017</link>
<guid isPermaLink="true" >http://www.hashicorp.com/blog/hashicorp-announcements-hashiconf-2017</guid>
<description>&lt;p&gt;Today at HashiConf 2017 in Austin, Texas, we announced major updates and new features across our entire suite of open source and enterprise products.&lt;/p&gt;&lt;p&gt;We announced updates to HashiCorp Terraform, Vault, Consul, and Nomad. In addition to these product updates, we announced the release of &lt;a href=&quot;https://hashicorp.com/sentinel/&quot;&gt;Sentinel&lt;/a&gt;, our new policy as code framework that integrates across the Enterprise product suite, and the &lt;a href=&quot;https://registry.terraform.io/&quot;&gt;Terraform Module Registry&lt;/a&gt;, which provides example infrastructure templates to make provisioning across cloud environments easier.&lt;/p&gt;&amp;#13;
&lt;p&gt;This blog will provide details on each of the announcements and where to go for more information.&lt;/p&gt;&amp;#13;
&lt;p&gt;Sentinel, HashiCorp’s Policy as Code Framework&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://hashicorp.com/sentinel/&quot;&gt;Sentinel&lt;/a&gt; enables organizations to define guardrails to safely automate infrastructure operations. A policy as code approach builds on the &lt;a href=&quot;https://www.hashicorp.com/tao-of-hashicorp/&quot;&gt;infrastructure as code philosophy&lt;/a&gt; of our existing tools, and brings the same benefits to security and compliance teams. Sentinel made of several components, including a new policy-oriented language, embedded runtime, development simulator, and plugin SDK. Sentinel is integrated across the HashiCorp Enterprise products, enabling active policy enforcement. For more information on Sentinel's policy as code framework, including key examples using Terraform, Vault, Nomad, and Consul, visit the &lt;a href=&quot;https://hashicorp.com/blog/sentinel-announcement-policy-as-code-framework/&quot;&gt;Sentinel announcement blog&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;p&gt;Terraform Module Registry&lt;/p&gt;&amp;#13;
&lt;p&gt;To help Terraform users get started and be more productive, we’ve released the &lt;a href=&quot;https://registry.terraform.io/&quot;&gt;HashiCorp Terraform Module Registry&lt;/a&gt;, a public repository of templates for common infrastructure patterns and popular services. These templates include support for Alibaba Cloud, AWS, Google, Microsoft Azure, and Oracle clouds, Kubernetes, and the HashiCorp products. To learn more, visit the &lt;a href=&quot;https://hashicorp.com/blog/hashicorp-terraform-module-registry&quot;&gt;Terraform Module Registry blog&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;p&gt;Terraform Enterprise Beta&lt;/p&gt;&amp;#13;
&lt;p&gt;We announced the beta release of Terraform Enterprise, which includes a new user interface and full API. The new release focuses around “Workspaces” which were introduced by Terraform 0.10 as a better way to manage and collaborate on infrastructure. The new features make it easier for practitioners to support multiple environments like staging and production, and allows security and compliance teams to apply the security and governance controls they need. For more details and additional information, visit the &lt;a href=&quot;https://hashicorp.com/blog/hashicorp-terraform-enterprise-beta&quot;&gt;Terraform Enterprise Beta blog&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;p&gt;Vault 0.8.3&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://hashicorp.com/blog/hashicorp-vault-0-8-3/&quot;&gt;HashiCorp Vault 0.8.3&lt;/a&gt; features support for Kubernetes. Vault integration with Kubernetes extends our platform-agnostic approach to secrets management and furthers the support of secure secrets management in modern environments and container workflows. The release provides native Kubernetes integration without additional integration components or requirements. Additionally, &lt;a href=&quot;https://www.hashicorp.com/products/vault/&quot;&gt;Vault Enterprise&lt;/a&gt; integrates seamlessly with Sentinel to further the capabilities of policy-based secrets management, and provides more control and depth to Vault's security model and policy system. To find out more, visit the &lt;a href=&quot;https://hashicorp.com/blog/hashicorp-vault-0-8-3/&quot;&gt;Vault 0.8.3 blog&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;p&gt;Consul 1.0&lt;/p&gt;&amp;#13;
&lt;p&gt;We are excited to announce Consul 1.0. Consul joins Vagrant and Packer as the third HashiCorp product to reach the 1.0 milestone. Consul 1.0 open source includes improvements to the Access Control List (ACL) system to make bootstrapping and configuring ACLs easier, and Autopilot enhancements to handle more version upgrade scenarios, and more. The beta releases of &lt;a href=&quot;https://www.consul.io/downloads.html&quot;&gt;Consul 1.0&lt;/a&gt; and &lt;a href=&quot;https://www.hashicorp.com/products/consul/&quot;&gt;Consul Enterprise 1.0&lt;/a&gt; will be available later this week.&lt;/p&gt;&amp;#13;
&lt;p&gt;Nomad 0.7 and Announcing Nomad Enterprise&lt;/p&gt;&amp;#13;
&lt;p&gt;We announced the beta release for &lt;a href=&quot;https://www.nomadproject.io/&quot;&gt;HashiCorp Nomad 0.7&lt;/a&gt;, our flexible and high-performance scheduler. This release includes an access control system to enable operators to limit access to APIs and jobs, as well as an integrated graphical user interface to explore the status of jobs, task groups, tasks and allocations. This release enables a better self-service workflow for developers and improved visibility for operators.&lt;/p&gt;&amp;#13;
&lt;p&gt;In addition to the Nomad 0.7 open source changes, we announced the beta release of Nomad Enterprise, a new addition to our enterprise product portfolio. &lt;a href=&quot;https://www.hashicorp.com/products/nomad/&quot;&gt;Nomad Enterprise&lt;/a&gt; adds important governance features for large enterprises, including namespaces, which will allow multiple tenants to safely use a shared cluster, as well as resource quotas, which will allow an administrator to limit resource consumption by namespace. Additionally, Sentinel is integrated in Nomad Enterprise which enforces policies on the job specification.&lt;/p&gt;&amp;#13;
&lt;p&gt;For more information and details about Nomad Enterprise, visit the &lt;a href=&quot;https://www.hashicorp.com/products/nomad/&quot;&gt;Nomad Enterprise site&lt;/a&gt; or read the &lt;a href=&quot;https://www.nomadproject.io/docs/enterprise/index.html&quot;&gt;Nomad Enterprise documentation&lt;/a&gt;.&lt;/p&gt;&amp;#13;
</description>
<pubDate>Tue, 19 Sep 2017 00:00:00 +0000</pubDate>
<dc:creator>Armon Dadgar</dc:creator>
<og:title>HashiCorp Announcements at HashiConf 2017</og:title>
<og:description>HashiCorp enables organizations to have consistent workflows to provision, secure, connect, and run any infrastructure for any application.</og:description>
<og:image>https://www.datocms-assets.com/2885/1508522484-share.jpg</og:image>
<og:type>article</og:type>
<dc:language>fr</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hashicorp.com/blog/hashicorp-announcements-hashiconf-2017</dc:identifier>
</item>
<item>
<title>HashiCorp Terraform Enterprise Beta</title>
<link>http://www.hashicorp.com/blog/hashicorp-terraform-enterprise-beta</link>
<guid isPermaLink="true" >http://www.hashicorp.com/blog/hashicorp-terraform-enterprise-beta</guid>
<description>&lt;p&gt;We're pleased to announce the release of the new HashiCorp Terraform Enterprise Beta. &lt;a href=&quot;https://www.hashicorp.com/products/terraform/&quot;&gt;Terraform Enterprise&lt;/a&gt; provides collaboration and governance features to safely and predictably codify, plan, and provision any infrastructure for any application. This release includes major new features and improvements.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.hashicorp.com/products/terraform/&quot; class=&quot;cta-btn&quot;&gt;Request Enterprise Trial &lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;The new Terraform Enterprise Beta adds major new functionality to Terraform Enterprise. Highlights include:&lt;/p&gt;&amp;#13;
&amp;#13;
&lt;p&gt;Workspaces replace Environments&lt;/p&gt;&amp;#13;
&lt;p&gt;With Terraform Enterprise Beta, we have replaced Environments with Workspaces. The “Environment” terminology was confusing because it did not align with organizations' models of an infrastructure environment and use of concepts like dev, staging, and prod. Large organizations often split up those large environments, such as prod, into smaller infrastructure components such as prod-networking, prod-app1, prod-monitoring.&lt;/p&gt;&amp;#13;
&lt;p&gt;Workspaces are a more flexible unit of organization that can map to the complexity of an organization's use of Terraform. A common trend is to break down monolithic infrastructure into smaller Workspaces that specific teams can delegate and manage. This is similar to the trend to split monolithic applications into smaller microservices, which are independently developed and managed.&lt;/p&gt;&amp;#13;
&lt;p&gt;Workspaces define the settings, Terraform configuration, and Terraform state for an infrastructure component.&lt;/p&gt;&amp;#13;
&amp;#13;
&lt;p&gt;New User Interface&lt;/p&gt;&amp;#13;
&lt;p&gt;Terraform Enterprise Beta introduces users to a new interface design that is modern, fast, and responsive to improve the user experience. The new user interface is designed for practitioners — the users who operate the organization’s infrastructure, manage Workspaces, and execute Runs.&lt;/p&gt;&amp;#13;
&lt;p&gt;In particular, we made a few key usability improvements:&lt;/p&gt;&amp;#13;
&lt;ul readability=&quot;5.5&quot;&gt;&lt;li readability=&quot;1&quot;&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Navigation has improved to put the latest run front and center, letting you edit variables and navigate through Workspace settings.&lt;/strong&gt; &lt;img src=&quot;https://www.datocms-assets.com/2885/1509734520-navigation.png&quot; alt=&quot;UI Navigation&quot; title=&quot;Workspace navigation&quot;/&gt;&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;5&quot;&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;From the Workspace list, you can view all Workspaces, their most recent run status, last update time, environment attribute, and the repository source.&lt;/strong&gt; &lt;img src=&quot;https://www.datocms-assets.com/2885/1509734521-asset-2.png&quot; alt=&quot;Workspaces&quot; title=&quot;Workspace list&quot;/&gt;&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;2&quot;&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;The new run details timeline view makes key information available at your fingertips. Easily navigate to the configuration, view Terraform plan and apply logs, and approve and apply planned changes.&lt;/strong&gt; &lt;img src=&quot;https://www.datocms-assets.com/2885/1509734521-run-details.png&quot; alt=&quot;Run Details&quot; title=&quot;Workspace Run&quot;/&gt;&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li&gt;&lt;strong&gt;Organization and Workspace settings have been redesigned to make getting started easier while maintaining the fine granularity of the settings.&lt;/strong&gt; &lt;img src=&quot;https://www.datocms-assets.com/2885/1509734521-oath-configuration-v2.png&quot; alt=&quot;Oath Configuration&quot; title=&quot;Oath Configuration&quot;/&gt;&lt;/li&gt;&amp;#13;
&lt;/ul&gt;&lt;p&gt;The following demo shows the workflow to collaborate on infrastructure using the new UI and Workspaces.&lt;/p&gt;&amp;#13;
&lt;center&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/atBRAG_3yNQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;[embedded content]&lt;/iframe&gt;&lt;/center&gt;&amp;#13;
&amp;#13;
&lt;h2&gt;Comprehensive API Coverage&lt;/h2&gt;&amp;#13;
&lt;p&gt;Terraform Enterprise Beta adds comprehensive API coverage and documentation. In the previous releases of Terraform Enterprise only a subset of features were available via the APIs. With the new Terraform Enterprise Beta, we took an API-first design approach and made all GUI operations driven by the same APIs available to users.&lt;/p&gt;&amp;#13;
&lt;p&gt;The comprehensive API coverage greatly improves integration with existing investments in tools and services. Customers who use tools for provisioning IT resources will be able to integrate with Terraform Enterprise Beta to programmatically manage Workspaces, teams, and access control. Engineering teams using CI/CD services like Jenkins can push configurations, trigger Terraform plans and applies, and get status via the API to integrate with their existing CI/CD pipeline.&lt;/p&gt;&amp;#13;
&lt;p&gt;Learn more about the Terraform Enterprise Beta API by reading the &lt;a href=&quot;https://www.terraform.io/docs/enterprise-beta/api/index.html&quot;&gt;documentation.&lt;/a&gt;&lt;/p&gt;&amp;#13;
&amp;#13;
&lt;h2&gt;Policy as Code support with Sentinel&lt;/h2&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Enterprise-Only Feature: This feature requires Terraform Enterprise Premium&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;a href=&quot;https://www.hashicorp.com/sentinel&quot;&gt;Sentinel&lt;/a&gt;, a policy as code framework for cloud infrastructure automation, helps organizations accelerate cloud adoption by setting policy guardrails for provisioning resources via Terraform Enterprise.&lt;/p&gt;&amp;#13;
&lt;p&gt;Large organizations want to enable their individual teams to independently provision and run their application however it becomes necessary for a central IT team to provide some constraints. A policy owner can define the Sentinel Policies to be applied to all resources provisioned via Terraform Enterprise across their organization. These policies are embedded into the provisioning workflow and enforced between a Terraform plan and Terraform apply. Before any resources are created, destroyed, or modified, the Terraform Plan will be verified to be in compliance with the policies. The policy owner can create policies that:&lt;/p&gt;&amp;#13;
&lt;ul&gt;&lt;li&gt;do not allow resources to be provisioned without tags&lt;/li&gt;&amp;#13;
&lt;li&gt;restrict which types of cloud resources can be provisioned&lt;/li&gt;&amp;#13;
&lt;li&gt;enforce secure defaults for network ingress/egress rules&lt;/li&gt;&amp;#13;
&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://www.terraform.io/docs/enterprise-beta/sentinel/index.html&quot;&gt;Learn more about Sentinel by reading the documentation&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;h2&gt;Accesing Terraform Enterprise Beta&lt;/h2&gt;&amp;#13;
&lt;p&gt;Terraform Enterprise Beta is available today. To request access go to &lt;a href=&quot;https://www.hashicorp.com/products/terraform/&quot;&gt;https://www.hashicorp.com/products/terraform/&lt;/a&gt;.&lt;/p&gt;&amp;#13;
</description>
<pubDate>Tue, 19 Sep 2017 00:00:00 +0000</pubDate>
<dc:creator>Maciej Skierkowski</dc:creator>
<og:title>HashiCorp Terraform Enterprise Beta</og:title>
<og:description>HashiCorp enables organizations to have consistent workflows to provision, secure, connect, and run any infrastructure for any application.</og:description>
<og:image>https://www.datocms-assets.com/2885/1508522484-share.jpg</og:image>
<og:type>article</og:type>
<dc:language>fr</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hashicorp.com/blog/hashicorp-terraform-enterprise-beta</dc:identifier>
</item>
<item>
<title>HashiCorp Terraform Module Registry</title>
<link>http://www.hashicorp.com/blog/hashicorp-terraform-module-registry</link>
<guid isPermaLink="true" >http://www.hashicorp.com/blog/hashicorp-terraform-module-registry</guid>
<description>&lt;p&gt;We are excited to announce the availability of the &lt;a href=&quot;http://registry.terraform.io&quot;&gt;HashiCorp Terraform Module Registry&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.hashicorp.com/products/terraform/&quot;&gt;HashiCorp Terraform&lt;/a&gt; is a tool to safely and efficiently build, change, and version on-premises and cloud infrastructure using a consistent workflow. Terraform uses automate infrastructure management through the use of infrastructure as code. Terraform configurations can be composed with &lt;a href=&quot;https://www.terraform.io/docs/modules/index.html&quot;&gt;modules&lt;/a&gt; to encapsulate groups of resources in your infrastructure.&lt;/p&gt;&amp;#13;
&lt;p&gt;The &lt;a href=&quot;http://registry.terraform.io&quot;&gt;HashiCorp Terraform Module Registry&lt;/a&gt; gives Terraform users easy access to templates for setting up and running their infrastructure with verified and community modules. This post shares the goals of the Terraform Module Registry, how to get started with the Terraform Module Registry as a module consumer and as a module contributor, and where to find more information.&lt;/p&gt;&amp;#13;
&lt;p&gt;The Terraform Module Registry is available at registry.terraform.io. The complete documentation for using the Module Registry can be found at &lt;a href=&quot;https://www.terraform.io/docs/registry/index.html&quot;&gt;https://www.terraform.io/docs/registry/index.html&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;p&gt;Terraform Module Registry Goals&lt;/p&gt;&amp;#13;
&lt;p&gt;The Module Registry addresses key challenges for module producers and module consumers. For module producers, the registry is a central place to publish, version, and share modules. For module consumers, the registry is a central place to discover, use, and collaborate on modules. The Module Registry makes it easier for partners and community members to share and collaborate on modules and also to update and version modules to continuously make improvements to infrastructure configurations. Expert users can share their knowledge and beginners can get up and running on Terraform faster.&lt;/p&gt;&amp;#13;
&lt;p&gt;Module Search&lt;/p&gt;&amp;#13;
&lt;p&gt;To address the challenge of finding modules, the Module Registry provides discovery through search and by surfacing popular modules.&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;img src=&quot;https://www.datocms-assets.com/2885/1509734521-01-registry-home-ss.png&quot; alt=&quot;Module Registry Landing Page&quot; title=&quot;Module Registry Home Page&quot;/&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;There are two categories of modules available in the Module Registry: Verified modules and Community modules. Verified modules have undergone certification and compatibility testing by HashiCorp prior to being accepted and are maintained by trusted HashiCorp partners. Community modules can be contributed by any user, but have not been validated by HashiCorp directly.&lt;/p&gt;&amp;#13;
&lt;p&gt;Module Versioning, Details, and Usage&lt;/p&gt;&amp;#13;
&lt;p&gt;Selecting a particular module will display usage details including a code snippet you can copy and paste into your Terraform configuration to provision the specified infrastructure.&lt;/p&gt;&amp;#13;
&lt;pre&gt;&amp;#13;
&lt;br/&gt;&lt;code&gt;&amp;#13;
module &quot;consul&quot; {&amp;#13;
source = &quot;hashicorp/consul/aws&quot;&amp;#13;
}&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&amp;#13;
&lt;p&gt;As modules change over time the registry will automatically track the versions released. Module versioning is unique to the Module Registry. This is nice if you want to continue to reuse a known version or upgrade to a latest version. For the initial release, Terraform supports pulling the latest version of a module. The next major version of Terraform will add full support for specifying version constraints. All modules published will be compatible once constraining versions is supported.&lt;/p&gt;&amp;#13;
&lt;p&gt;Each module also displays the details for inputs, outputs, and resources created. If a module depends on external modules, these are listed too.&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;img src=&quot;https://www.datocms-assets.com/2885/1509734521-02-registry-module-ss.png&quot; alt=&quot;Registry Module Screenshot&quot; title=&quot;Registry Module Screenshot&quot;/&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;Using a Module from the Registry&lt;/p&gt;&amp;#13;
&lt;p&gt;Once you have found a module you want to use, you can copy the code in the Provision Instructions into your configuration to import it. If the module has any required variables, you will need to add those to the pasted code block. When viewing the module in the registry, you can view the list of required variables in the Inputs section. You can then complete the import process by running &lt;code&gt;terraform init&lt;/code&gt;.&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;img src=&quot;https://www.datocms-assets.com/2885/1509734526-03-registry-download.gif&quot; alt=&quot;Registry Download&quot; title=&quot;Registry Download&quot;/&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;The complete documentation for using the Module Registry can be found at &lt;a href=&quot;https://www.terraform.io/docs/registry/index.html&quot;&gt;https://www.terraform.io/docs/registry/index.html&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;p&gt;Powered by Partners and the Community&lt;/p&gt;&amp;#13;
&lt;p&gt;The Module Registry provides a central place to publish modules. The cloud vendors and their communities contribute and maintain modules for the Module Registry. This model allows partners with the best expertise to provide reliable and quality modules for Alibaba Cloud, AWS, Google Cloud Platform, Microsoft Azure, and Oracle Cloud. The Module Registry is populated with an initial set of some of the most common infrastructure topologies used by customers. These initial services available today include example modules for compute, compute groups, core networking, databases, and load balancers. There are also modules contributed by CoreOS for Kubernetes and from Gruntwork, who built and maintain modules for HashiCorp Consul, Vault, and Nomad on AWS, Azure, and GCP.&lt;/p&gt;&amp;#13;
&lt;p&gt;You can read more about how &lt;a href=&quot;https://cloudplatform.googleblog.com/2017/09/HashiCorp-and-Google-expand-collaboration-easing-secret-and-infrastructure-management.html&quot;&gt;HashiCorp and Google expand collaboration, easing secret and infrastructure management&lt;/a&gt; in Google's blog. Microsoft has also detailed their collaboration on Terraform and the Module Registry in their blog &lt;a href=&quot;https://aka.ms/hashiconfrelease&quot;&gt;More and more fun with Terraform on Azure&lt;/a&gt;. There is also a blog from Oracle, &lt;a href=&quot;https://blogs.oracle.com/developers/announcing-oracle-cloud-infrastructure-modules-for-the-terraform-modules-registry&quot;&gt;Announcing Oracle Cloud Infrastructure Modules for the Terraform Module Registry&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;p&gt;In addition to the official partners, anyone in the Terraform community can publish modules directly from GitHub. To get started, sign in via GitHub and choose a repository. Module repositories must &lt;a href=&quot;https://www.terraform.io/docs/registry/modules/publish.html&quot;&gt;follow the guidelines for module creation&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;img src=&quot;https://www.datocms-assets.com/2885/1509734526-04-registry-upload.gif&quot; alt=&quot;Registry Module Upload&quot; title=&quot;Module Registry Upload&quot;/&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;Integration of the Module Registry with Terraform Enterprise&lt;/p&gt;&amp;#13;
&lt;p&gt;HashiCorp Terraform Enterprise will deliver a private version of the Module Registry in an upcoming release. This will allow organizations to safely share private modules with their internal teams. The integration of the Module Registry into Terraform Enterprise will allow organizations to standardize on expert modules across their user base. For more information on Terraform Enterprise, visit &lt;a href=&quot;http://www.hashicorp.com/products/terraform&quot;&gt;www.hashicorp.com/products/terraform&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;Conclusion&lt;/p&gt;&amp;#13;
&lt;p&gt;Terraform provides organizations with infrastructure as code, cloud platform management, and the ability to create modules for self-service infrastructure. The Module Registry provides a new platform for sharing and reuse to empower individuals to quickly provision and manage their infrastructure with Terraform.&lt;/p&gt;&amp;#13;
&lt;p&gt;To get started with Terraform Module Registry, visit &lt;a href=&quot;https://registry.terraform.io&quot;&gt;https://registry.terraform.io&lt;/a&gt;.&lt;/p&gt;&amp;#13;
</description>
<pubDate>Tue, 19 Sep 2017 00:00:00 +0000</pubDate>
<dc:creator>Mitchell Hashimoto</dc:creator>
<og:title>HashiCorp Terraform Module Registry</og:title>
<og:description>HashiCorp enables organizations to have consistent workflows to provision, secure, connect, and run any infrastructure for any application.</og:description>
<og:image>https://www.datocms-assets.com/2885/1508522484-share.jpg</og:image>
<og:type>article</og:type>
<dc:language>fr</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hashicorp.com/blog/hashicorp-terraform-module-registry</dc:identifier>
</item>
<item>
<title>Announcing the HashiCorp Partner Network</title>
<link>http://www.hashicorp.com/blog/announcing-hashicorp-partner-network</link>
<guid isPermaLink="true" >http://www.hashicorp.com/blog/announcing-hashicorp-partner-network</guid>
<description>&lt;p&gt;HashiCorp has a strong commitment to invest in both the community and the ecosystem that is emerging around the HashiCorp products. As an open source company, our investment is critical to build this ecosystem, which will in turn help us continue to drive innovation, growth, and success for our users and customers.&lt;/p&gt;&lt;p&gt;Today, we are announcing an example of this investment: the launch of the HashiCorp Partner Network. As part of this launch, we are announcing Reseller and System Integrator programs. In addition, we are including our strong, existing Cloud, Technology and Training partnerships as a part of the HashiCorp Partner Network. All of this will enable us to continue to work closely with the community as well as attract new partners who wish to leverage the HashiCorp suite of products to grow their businesses.&lt;/p&gt;&amp;#13;
&lt;p&gt;We expect the HashiCorp Partner Network to bring together and provide growth for our entire ecosystem. It will leverage the strengths between partners, as well as create connections for new potential services and technologies.&lt;/p&gt;&amp;#13;
&lt;p&gt;Reseller Program&lt;/p&gt;&amp;#13;
&lt;p&gt;The Reseller Program offers two tiers for partners to choose from, depending on their desired level of engagement. The goal of this program is to give Resellers a path to easily deliver products and support so customers can purchase where it makes the most sense for them.&lt;/p&gt;&amp;#13;
&lt;p&gt;System Integrator Program&lt;/p&gt;&amp;#13;
&lt;p&gt;The System Integrator Program offers three tiers, allowing partners to engage at the level that meets their organization’s goals and customer needs. This program allows any consultant or integrator to become certified on one or more of our products through self-paced, online learning available specifically for partners. The benefits increase with the partner’s expertise.&lt;/p&gt;&amp;#13;
&lt;p&gt;For existing partners, we will be sending additional information about how we can align our relationship with the correct level in this new program&lt;/p&gt;&amp;#13;
&lt;p&gt;Conclusion&lt;/p&gt;&amp;#13;
&lt;p&gt;Our partners’ technology and services have been part of the fabric of customer success with the HashiCorp products from the beginning. As such, we have developed these partner program offerings with input from both current and prospective partners and will continue to evolve the programs based on feedback from our partner community.&lt;/p&gt;&amp;#13;
&lt;p&gt;Partners interested in learning details can email &lt;a href=&quot;mailto:partners@hashicorp.com&quot;&gt;partners@hashicorp.com&lt;/a&gt;. Partners wishing to submit an application to become a partner can go to the &lt;a href=&quot;https://www.hashicorp.com/partners/&quot;&gt;HashiCorp Partner Network&lt;/a&gt; page on our website.&lt;/p&gt;&amp;#13;
</description>
<pubDate>Mon, 18 Sep 2017 00:00:00 +0000</pubDate>
<dc:creator>Jen Murphy</dc:creator>
<og:title>Announcing the HashiCorp Partner Network</og:title>
<og:description>HashiCorp enables organizations to have consistent workflows to provision, secure, connect, and run any infrastructure for any application.</og:description>
<og:image>https://www.datocms-assets.com/2885/1508522484-share.jpg</og:image>
<og:type>article</og:type>
<dc:language>da</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hashicorp.com/blog/announcing-hashicorp-partner-network</dc:identifier>
</item>
<item>
<title>HashiCorp Packer 1.1.0</title>
<link>http://www.hashicorp.com/blog/hashicorp-packer-1-1-0</link>
<guid isPermaLink="true" >http://www.hashicorp.com/blog/hashicorp-packer-1-1-0</guid>
<description>&lt;p&gt;We are proud to announce the release of HashiCorp Packer 1.1.0. This release includes several new features, improvements, bug fixes, and backwards incompatibilities.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.packer.io/downloads.html&quot; class=&quot;cta-btn&quot; target=&quot;_blank&quot;&gt;Download Now &lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;Here are some highlights from Packer 1.1.0:&lt;/p&gt;&amp;#13;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;New Oracle Cloud Infrastructure builder&lt;/strong&gt; for creating custom images.&lt;/li&gt;&amp;#13;
&lt;li&gt;&lt;strong&gt;New LXC builder&lt;/strong&gt; for creating lxc containers.&lt;/li&gt;&amp;#13;
&lt;li&gt;&lt;strong&gt;New LXD builder&lt;/strong&gt; for creating lxd containers.&lt;/li&gt;&amp;#13;
&lt;li&gt;&lt;strong&gt;Windows Improvements -&lt;/strong&gt; Fixed several issues with provisioning after restarting.&lt;/li&gt;&amp;#13;
&lt;li&gt;&lt;strong&gt;Windows Support for Puppet -&lt;/strong&gt; The Puppet provisioner now has a &lt;code&gt;guest_os_type&lt;/code&gt; to configure it to run on Windows.&lt;/li&gt;&amp;#13;
&lt;li&gt;&lt;strong&gt;Amazon tags applied at launch -&lt;/strong&gt; Updates to the aws sdk let us create tags as resources are created to eliminate poling.&lt;/li&gt;&amp;#13;
&lt;li&gt;&lt;strong&gt;Shell scripts now error if disconnected -&lt;/strong&gt; The new default behavior of the shell provisioner is to error if the connection is dropped. This might cause your builds to fail if you reset your connection, for example with a restart command. Please change the &lt;code&gt;expect_disconnect&lt;/code&gt; flag to &lt;code&gt;true&lt;/code&gt; if this is the case.&lt;/li&gt;&amp;#13;
&lt;/ul&gt;&lt;p&gt;There are many other changes and improvements in this release. Please review the &lt;a href=&quot;https://github.com/hashicorp/packer/blob/v1.1.0/CHANGELOG.md#110-september-12-2017&quot;&gt;v1.1.0 changelog&lt;/a&gt; for a detailed list of changes.&lt;/p&gt;&amp;#13;
</description>
<pubDate>Thu, 14 Sep 2017 00:00:00 +0000</pubDate>
<dc:creator>Matthew Hooker</dc:creator>
<og:title>HashiCorp Packer 1.1.0</og:title>
<og:description>HashiCorp enables organizations to have consistent workflows to provision, secure, connect, and run any infrastructure for any application.</og:description>
<og:image>https://www.datocms-assets.com/2885/1508522484-share.jpg</og:image>
<og:type>article</og:type>
<dc:language>da</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hashicorp.com/blog/hashicorp-packer-1-1-0</dc:identifier>
</item>
<item>
<title>HashiCorp Terraform Provider Versioning</title>
<link>http://www.hashicorp.com/blog/hashicorp-terraform-provider-versioning</link>
<guid isPermaLink="true" >http://www.hashicorp.com/blog/hashicorp-terraform-provider-versioning</guid>
<description>&lt;p&gt;In &lt;a href=&quot;https://www.hashicorp.com/blog/hashicorp-terraform-0-10/&quot;&gt;HashiCorp Terraform 0.10&lt;/a&gt;, Terraform was split into two logical components: Terraform Core and Terraform Providers. A major motivation for this change was the acknowledgement that provider development has a different scope and development speed. The various providers are constantly changing, and it's always been frustrating when a major new feature in your chosen platform is delayed in Terraform because of the need to coordinate releases with other providers and with Core.&lt;/p&gt;&lt;p&gt;A more mundane aspect of separate provider releases is separate provider version numbers. Previously Core and all of the providers shared a single version number for each release. Users may have noticed that, with the new separate release schedules, providers have begun their own version numbering scheme at 0.1.0, and have been incrementing from there.&lt;/p&gt;&amp;#13;
&lt;p&gt;Observing that Terraform providers are in many ways analogous to shared libraries in a programming language, we're adopting a version numbering scheme for providers that follows the guidelines of &lt;a href=&quot;http://semver.org&quot;&gt;Semantic Versioning&lt;/a&gt;. In summary, this means that with a version number of the form MAJOR.MINOR.PATCH, the following meanings apply:&lt;/p&gt;&amp;#13;
&lt;ul&gt;&lt;li&gt;Increasing only the patch number suggests that the release includes only bug fixes, and is intended to be functionally equivalent.&lt;/li&gt;&amp;#13;
&lt;li&gt;Increasing the minor number suggests that new features have been added but that existing functionality remains broadly compatible.&lt;/li&gt;&amp;#13;
&lt;li&gt;Increasing the major number indicates that significant breaking changes have been made, and thus extra care or attention is required during an upgrade.&lt;/li&gt;&amp;#13;
&lt;/ul&gt;&lt;p&gt;At the time of writing, most of the providers within the &lt;a href=&quot;https://github.com/terraform-providers&quot;&gt;terraform-providers GitHub organization&lt;/a&gt; remain on 0.x.x &quot;initial development&quot; numbering, which (per the semantic versioning spec) represents that the above promises do not necessarily yet apply. However, as each provider development team gets ready to work within this scheme it will be indicated by a release numbered 1.0.0, after which the above conventions will be adopted for future releases.&lt;/p&gt;&amp;#13;
&lt;p&gt;For providers in particular, the move to 1.0.0 will not generally represent any significant change in functionality or any change in development velocity. Most of the providers are already of very high quality and have a stable development process, so this version change is merely an acknowledgement of the existing quality and stability.&lt;/p&gt;&amp;#13;
&lt;p&gt;Third-Party Providers&lt;/p&gt;&amp;#13;
&lt;p&gt;A discussion of provider versioning would not be complete without mentioning third-party providers. We know that many Terraform users maintain their own providers for a variety of additional services, and we are grateful that many of these are maintained as open source projects.&lt;/p&gt;&amp;#13;
&lt;p&gt;As the suite of providers distributed by HashiCorp has grown, it's become clear that maintaining all of them in-house at the level of quality we expect is impossible to scale. As a result of this, we are grateful to our collaborators in the community and in our partner organizations as we improve the development process. We want to ensure that every provider has a suite of acceptance tests with high coverage, and a responsive team of maintainers who can respond to issues and pull requests. As a consequence, we are being more reserved about adopting new providers into the set HashiCorp distributes.&lt;/p&gt;&amp;#13;
&lt;p&gt;In Terraform 0.10, the auto-install mechanism in Terraform Core supports only HashiCorp's server and so third-party providers must still be downloaded and copied manually to one of a set of local search directories.&lt;/p&gt;&amp;#13;
&lt;p&gt;Supporting only the HashiCorp releases service for the first release was a pragmatic compromise to allow this change to happen sooner, by building on distribution infrastructure that was already in place. A more general solution for distribution is planned, with the goal of making third-party-built providers just as easy to obtain and use.&lt;/p&gt;&amp;#13;
&lt;p&gt;In the meantime, we recommend that third-party provider maintainers begin to adopt a similar semantic versioning scheme for their releases, embedding these version numbers in the plugin binary filenames using the scheme &lt;code&gt;terraform-provider-NAME_vX.Y.Z&lt;/code&gt;. Plugin binaries named in this way will be recognized by Terraform as being versioned, and will thus integrate with the explicit provider versioning mechanisms introduced in Terraform 0.10.0.&lt;/p&gt;&amp;#13;
&lt;p&gt;Versioning of Terraform Core&lt;/p&gt;&amp;#13;
&lt;p&gt;Semantic versioning is primarily applicable to libraries, since its promises relate to compatibility with calling software via a well-defined API. Terraform Core, as an application, will therefore not be switching over to semantic versioning conventions and will instead continue in the same vein as other HashiCorp products.&lt;/p&gt;&amp;#13;
&lt;p&gt;Terraform is already used by many organizations to maintain critical infrastructure, and we take very seriously the tradeoff between improving Terraform's usability and feature set vs. maintaining compatibility with existing configurations and orchestration. Throughout the Terraform 0.x releases, we are listening to feedback and improving Terraform iteratively, making breaking changes only when warranted, and communicating about those changes via the changelog and upgrade guides.&lt;/p&gt;&amp;#13;
&lt;p&gt;The eventual 1.0 release will represent our intent to adopt an even stronger promise of backward-compatibility, but that entails first finding the right set of configuration language features, a maintainable internal architecture, a more complete module system, and various other aspects of the product so that we can commit to compatibility with the 1.0 feature set for the long haul.&lt;/p&gt;&amp;#13;
&lt;p&gt;It is our goal to remain as compatible as possible with the wide variety of existing uses of Terraform while continuing to improve it. Thank you to the community for the continued feedback as we continue iterating on the product design!&lt;/p&gt;&amp;#13;
</description>
<pubDate>Wed, 13 Sep 2017 00:00:00 +0000</pubDate>
<dc:creator>Martin Atkins</dc:creator>
<og:title>HashiCorp Terraform Provider Versioning</og:title>
<og:description>HashiCorp enables organizations to have consistent workflows to provision, secure, connect, and run any infrastructure for any application.</og:description>
<og:image>https://www.datocms-assets.com/2885/1508522484-share.jpg</og:image>
<og:type>article</og:type>
<dc:language>it</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hashicorp.com/blog/hashicorp-terraform-provider-versioning</dc:identifier>
</item>
<item>
<title>HashiCorp Consul 0.9.3</title>
<link>http://www.hashicorp.com/blog/consul-0-9-3</link>
<guid isPermaLink="true" >http://www.hashicorp.com/blog/consul-0-9-3</guid>
<description>&lt;p&gt;Today we are releasing Consul 0.9.3 which includes a number of features and improvements.&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;cta-btn&quot; title=&quot;&quot; href=&quot;https://www.consul.io/downloads.html&quot;&gt;Download Now&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;Here are some highlights from Consul 0.9.3:&lt;/p&gt;&amp;#13;
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Better handling for Node IP address changes -&lt;/strong&gt; This makes it much easier to run Consul in containers when all Consul servers can be restarted with new IP addresses.&lt;/li&gt;&amp;#13;
&lt;li&gt;&lt;strong&gt;WAN Join for Cloud Providers -&lt;/strong&gt; Added WAN support for retry join for cloud providers via go-discover, including Amazon AWS, Microsoft Azure, Google Cloud, and SoftLayer. This uses the same &quot;provider&quot; syntax supported for -retry-join via the -retry-join-wan configuration.&lt;/li&gt;&amp;#13;
&lt;li&gt;&lt;strong&gt;RPC Rate Limiter -&lt;/strong&gt; Consul agents in client mode have a new configuration that enables a rate limit on RPC calls to Consul servers, enabling operators to control misbehaving applications.&lt;/li&gt;&amp;#13;
&lt;li&gt;&lt;strong&gt;Network Segments (Enterprise) -&lt;/strong&gt; Users can now configure Consul to support segmented LAN topologies with multiple, distinct gossip pools for multi-tenant environments where not all agents can be in a full network mesh. &lt;a href=&quot;https://www.consul.io/docs/enterprise/network-segments/index.html&quot;&gt;Learn more about Network Segments&lt;/a&gt;.&lt;/li&gt;&amp;#13;
&lt;/ul&gt;&lt;p&gt;In addition to these new features, there are a bunch of bug fixes and improvements. Please review the &lt;a href=&quot;https://github.com/hashicorp/consul/blob/master/CHANGELOG.md#093-september-8-2017&quot;&gt;v0.9.3 changelog&lt;/a&gt; for a detailed list of changes. As always, please test in an isolated environment before upgrading. Consul 0.9.3 is also available in &lt;a href=&quot;https://www.hashicorp.com/products/consul/&quot;&gt;Consul Enterprise Pro and Consul Enterprise Premium&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;p&gt;A special thank you to our community members who have been invaluable in adding new features, reporting bugs, and improving the documentation for Consul.&lt;/p&gt;&amp;#13;
&amp;#13;
</description>
<pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate>
<dc:creator>James Phillips</dc:creator>
<og:title>HashiCorp Consul 0.9.3</og:title>
<og:description>HashiCorp enables organizations to have consistent workflows to provision, secure, connect, and run any infrastructure for any application.</og:description>
<og:image>https://www.datocms-assets.com/2885/1508522484-share.jpg</og:image>
<og:type>article</og:type>
<dc:language>de</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hashicorp.com/blog/consul-0-9-3</dc:identifier>
</item>
<item>
<title>HashiCorp Vagrant 2.0</title>
<link>http://www.hashicorp.com/blog/hashicorp-vagrant-2-0</link>
<guid isPermaLink="true" >http://www.hashicorp.com/blog/hashicorp-vagrant-2-0</guid>
<description>&lt;p&gt;We're announcing &lt;a href=&quot;https://www.vagrantup.com&quot;&gt;HashiCorp Vagrant 2.0&lt;/a&gt;. Vagrant is a tool for building and distributing development environments.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.vagrantup.com/downloads.html&quot; class=&quot;cta-btn&quot;&gt;Download Now &lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;Vagrant 2.0 supports provisioning development environments on VirtualBox, VMware, Hyper-V, Docker, AWS, GCP, and more. It can virtualize Windows, macOS, and a dozen other new operating systems. Vagrant 2.0 is paired with &lt;a href=&quot;https://app.vagrantup.com&quot;&gt;Vagrant Cloud&lt;/a&gt; for finding and consuming boxes. It has come a long way since Vagrant 1.0 when it only supported VirtualBox, and the community has grown significantly since then.&lt;/p&gt;&amp;#13;
&lt;p&gt;Vagrant 2.0 is available immediately from the &lt;a href=&quot;https://www.vagrantup.com&quot;&gt;Vagrant website&lt;/a&gt;. You can find the full list of changes in recent Vagrant releases in the &lt;a href=&quot;https://github.com/mitchellh/vagrant/blob/v2.0.0/CHANGELOG.md&quot;&gt;Changelog&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;p&gt;HashiCorp Vagrant&lt;/p&gt;&amp;#13;
&lt;p&gt;Vagrant was started in 2009 and quickly became a go-to tool for development environments and infrastructure automation development. The goal of Vagrant is to create a single workflow to build development infrastructures that mirror production.&lt;/p&gt;&amp;#13;
&lt;p&gt;Vagrant 1.0 was released in 2013 as a stable release. Vagrant 1.0 only supported VirtualBox as a provider, only supported a handful of Linux operating systems as guests, and supported a simple up/destroy workflow. Since Vagrant 1.0, we've added support for multi-providers such as VMware and Docker, guests such as Windows, macOS, and complex workflows including snapshots. These major changes are followed by hundreds of improvements and bug fixes.&lt;/p&gt;&amp;#13;
&lt;p&gt;Prior to Vagrant, development environments were primarily manually made, error prone, and time consuming. Infrastructure automation development had extremely long feedback cycles as real machines were created and destroyed. Vagrant turns both of these processes into a single command.&lt;/p&gt;&amp;#13;
&lt;p&gt;Vagrant is part of the HashiCorp product suite that enables you to provision, secure, connect and run any infrastructure for any application. You can provision development environments with Vagrant, build Vagrant images using HashiCorp Packer, launch infrastructure using HashiCorp Terraform, handle secrets management with Vault, schedule workloads with Nomad, and connect your infrastructure using Consul.&lt;/p&gt;&amp;#13;
&lt;p&gt;Community and Team&lt;/p&gt;&amp;#13;
&lt;p&gt;We want to thank our community and the Vagrant core team for bringing Vagrant to 2.0! HashiCorp Vagrant has over 750 contributors since it began 7 years ago. These contributors have added features, fixed bugs, and helped Vagrant move forward for years.&lt;/p&gt;&amp;#13;
&lt;p&gt;Due to the large surface area of compatibility Vagrant has to maintain, the project relies on the community to make the necessary improvements. Our community is filled with experts for every type of provider, every operating system, every provisioner, and more. These community members together create the versatile tool that is Vagrant.&lt;/p&gt;&amp;#13;
&lt;p&gt;At HashiCorp, Chris Roberts has led the charge towards 2.0. He became project lead of the project in 2016 and was tasked with completing the important stability work necessary to achieve version 2.0. Chris is joined by Brian Cain and Justin Campbell. Together, these three make sure Vagrant continues to progress every day.&lt;/p&gt;&amp;#13;
</description>
<pubDate>Thu, 07 Sep 2017 00:00:00 +0000</pubDate>
<dc:creator>Mitchell Hashimoto</dc:creator>
<og:title>HashiCorp Vagrant 2.0</og:title>
<og:description>HashiCorp enables organizations to have consistent workflows to provision, secure, connect, and run any infrastructure for any application.</og:description>
<og:image>https://www.datocms-assets.com/2885/1508522484-share.jpg</og:image>
<og:type>article</og:type>
<dc:language>fr</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hashicorp.com/blog/hashicorp-vagrant-2-0</dc:identifier>
</item>
<item>
<title>HashiCorp Vault 0.8.2</title>
<link>http://www.hashicorp.com/blog/vault-0-8-2</link>
<guid isPermaLink="true" >http://www.hashicorp.com/blog/vault-0-8-2</guid>
<description>&lt;p&gt;We are proud to announce the release of HashiCorp Vault 0.8.2, which includes a number of new features, improvements, bug fixes, and a security notice.&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;cta-btn&quot; title=&quot;&quot; href=&quot;https://www.vaultproject.io/downloads.html&quot;&gt;Download Now&lt;/a&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;Security&lt;/p&gt;&amp;#13;
&lt;p&gt;In prior versions of Vault, if authenticating via the AWS authentication backend using the IAM method and requesting a periodic token, the period was not properly respected upon token renewal. This could lead to tokens expiring unexpectedly, or a token lifetime being longer than expected. Upon token renewal with Vault 0.8.2 the period will be properly enforced.&lt;/p&gt;&amp;#13;
&lt;p&gt;Major Features&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Lazy Lease Loading&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;When Vault takes over active duty, it needs to load all outstanding leases on dynamic credentials and Vault tokens in order to properly authenticate requests and to revoke expired credentials as soon as possible.&lt;/p&gt;&amp;#13;
&lt;p&gt;In previous versions of Vault, this process was synchronous. However, as our customers scaled Vault to handle ever-larger numbers of secrets and users, this could result in a cold-boot or HA-failover transition that stretched into minutes or hours depending on a number of factors, such as the number of outstanding leases and storage/network speed.&lt;/p&gt;&amp;#13;
&lt;p&gt;In Vault 0.8.2, we’ve made this loading lazy. Loading will happen in the background while Vault continues to service requests. For any synchronous operation affecting leases (including those attached to tokens) -- a lookup, a lease renewal, or a lease revocation -- that lease will be synchronously paged in if it has not yet been loaded by the lazy loading process.&lt;/p&gt;&amp;#13;
&lt;p&gt;For large installations, this should reduce HA failover time from minutes or hours to seconds, at the expense of some potential higher request latency during loading for leases that need to be looked up but have not yet been loaded by the lazy loading process.&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;br/&gt;&amp;#13;
Minor Features&lt;/p&gt;&amp;#13;
&lt;p&gt;See the &lt;a href=&quot;https://github.com/hashicorp/vault/blob/v0.8.2/CHANGELOG.md&quot;&gt;Vault 0.8.2 changelog&lt;/a&gt; for a full list of changes in addition to the features called out here.&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;SSH Login with &lt;code&gt;vault ssh&lt;/code&gt; using Certificates&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;vault ssh now supports authenticating to machines via and remote host key verification through the SSH secret backend (if enabled).&lt;/p&gt;&amp;#13;
&lt;p&gt;Although issuing certificates was possible in previous releases of Vault, the vault ssh command did not know how to take advantage of this, and was only usable with the older modes of operation of the SSH secrets backend.&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Signing of Self-Issued Certs in PKI&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;The PKI backend can now sign self-issued certificates. These are certificates in which the subject and issuer DNs are the same (and neither is the PKI backend’s CA cert).&lt;/p&gt;&amp;#13;
&lt;p&gt;This is mostly useful for switching root CAs. The client can verify that the self-issued certificate is signed via an authority key ID that it trusts in order to build a trust relationship with the new CA.&lt;/p&gt;&amp;#13;
&lt;p&gt;When performing this signing, only basic verification of the given certificate is performed (ensuring it’s a CA and it’s self-issued), so access to this endpoint should be highly restricted.&lt;/p&gt;&amp;#13;
&lt;p&gt;Upgrade Notes&lt;/p&gt;&amp;#13;
&lt;p&gt;Vault 0.8.2 introduces architectural changes to the Secure Plugin system introduced in Vault 0.8 to better support certain situations with sealing/unsealing Vault instances. As such, Vault plugins will need to be built with the latest changes in order for them to run properly. See the &lt;a href=&quot;https://github.com/hashicorp/vault/blob/v0.8.2/CHANGELOG.md&quot;&gt;changelog for more details&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;p&gt;As always, please test in an isolated environment before upgrading and follow &lt;a href=&quot;https://www.vaultproject.io/guides/upgrading/index.html&quot;&gt;Vault's Upgrade Guide&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;p&gt;Thank you again to the Vault community for their ideas, bug reports, and pull requests.&lt;/p&gt;&amp;#13;
</description>
<pubDate>Wed, 06 Sep 2017 00:00:00 +0000</pubDate>
<dc:creator>Andy Manoske</dc:creator>
<og:title>HashiCorp Vault 0.8.2</og:title>
<og:description>HashiCorp enables organizations to have consistent workflows to provision, secure, connect, and run any infrastructure for any application.</og:description>
<og:image>https://www.datocms-assets.com/2885/1508522484-share.jpg</og:image>
<og:type>article</og:type>
<dc:language>fr</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hashicorp.com/blog/vault-0-8-2</dc:identifier>
</item>
<item>
<title>Managing Kubernetes Applications with HashiCorp Terraform</title>
<link>http://www.hashicorp.com/blog/managing-kubernetes-applications-with-hashicorp-terraform</link>
<guid isPermaLink="true" >http://www.hashicorp.com/blog/managing-kubernetes-applications-with-hashicorp-terraform</guid>
<description>&lt;p&gt;&lt;a href=&quot;https://www.hashicorp.com/products/terraform/&quot;&gt;HashiCorp Terraform&lt;/a&gt; is an open source tool that enables users to provision any infrastructure using a consistent workflow. While Terraform can manage infrastructure for both public and private cloud services, it can also manage external services like &lt;a href=&quot;https://www.hashicorp.com/blog/managing-github-with-terraform/&quot;&gt;GitHub&lt;/a&gt;, &lt;a href=&quot;https://www.hashicorp.com/blog/continuous-deployment-with-nomad-and-terraform/&quot;&gt;Nomad&lt;/a&gt;, or &lt;a href=&quot;https://kubernetes.io&quot;&gt;Kubernetes&lt;/a&gt; pods. This post highlights the new Terraform Kubernetes provider which enables operators to manage the lifecycle of Kubernetes resources using declarative infrastructure as code.&lt;/p&gt;&lt;p&gt;Terraform enables provisioning infrastructure and infrastructure resources through an extensible ecosystem of providers (plugins). In addition to explaining the benefits of using Terraform to manage Kubernetes resources versus the Kubernetes CLI, this post also walks through using new &lt;a href=&quot;https://www.terraform.io/docs/providers/kubernetes/index.html&quot;&gt;Kubernetes provider&lt;/a&gt; to interact with Kubernetes resources (pods, replication controllers, and services) and enabling operators to control the lifecycle of Kubernetes resources using infrastructure as code.&lt;/p&gt;&amp;#13;
&lt;p&gt;Why Terraform&lt;/p&gt;&amp;#13;
&lt;p&gt;&lt;strong&gt;Q: Why would I use Terraform to manage Kubernetes resources as infrastructure as code?&lt;/strong&gt;&lt;/p&gt;&amp;#13;
&lt;p&gt;Terraform uses the same declarative syntax to provision the lower underlying infrastructure (compute, networking, and storage) and scheduling (application) layer. Using graph theory, Terraform models the relationships between all dependencies in your infrastructure automatically. This same graph enables Terraform to automatically detect drift as resources (like compute instances or Kubernetes pods) change over time. This drift is presented to the user for confirmation as part of the Terraform dry-run planning phase.&lt;/p&gt;&amp;#13;
&lt;p&gt;Terraform provides full lifecycle management of Kubernetes resources including creation and deletion of pods, replication controllers, and services.&lt;/p&gt;&amp;#13;
&lt;p&gt;Because Terraform understands the relationships between resources, it has an inherent understanding of the order of operations and failure conditions for creating, updating, and deleting resources. For example, if a persistent volume claim (PVC) requires space from a particular persistent volume (PV), Terraform automatically knows to create the PV before the PVC. If the PV fails to create, Terraform will not attempt to create the PVC, since Terraform knows the creation will fail.&lt;/p&gt;&amp;#13;
&lt;p&gt;Unlike the &lt;code&gt;kubectl&lt;/code&gt; CLI, Terraform will wait for services to become ready before creating dependent resources. This is useful when you want to guarantee state following the command's completion. As a concrete example of this behavior, Terraform will wait until a service is provisioned so it can add the service's IP to a load balancer. No manual processes necessary!&lt;/p&gt;&amp;#13;
&lt;p&gt;Getting started with the Kubernetes provider&lt;/p&gt;&amp;#13;
&lt;p&gt;This post assumes you already have a Kubernetes cluster up and running, and that the cluster is accessible from the place where Terraform is running. Terraform can provision a Kubernetes cluster, but that is not specifically discussed in this post. The easiest way to configure the Kubernetes provider is to create a configuration file at &lt;code&gt;~/.kube/config&lt;/code&gt;. Terraform will automatically load that configuration during its run.&lt;/p&gt;&amp;#13;
&lt;pre&gt;&amp;#13;
&lt;br/&gt;&lt;code class=&quot;language-hcl&quot;&gt;# main.tf&amp;#13;
provider &quot;kubernetes&quot; {}&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&amp;#13;
&lt;p&gt;When it is not feasible to create a configuration file, you can configure the provider directly in the configuration or via environment variables. This is useful in CI systems or ephemeral environments that change frequently.&lt;/p&gt;&amp;#13;
&lt;p&gt;After specifying the provider, initialize Terraform. This will download and install the latest version of the Terraform Kubernetes provider.&lt;/p&gt;&amp;#13;
&lt;pre readability=&quot;5&quot;&gt;&amp;#13;
&lt;br/&gt;&lt;code class=&quot;language-text&quot; readability=&quot;29&quot;&gt;$ terraform init&lt;p&gt;Initializing provider plugins...&amp;#13;
- Downloading plugin for provider &quot;kubernetes&quot;...&lt;/p&gt;&lt;p&gt;Terraform has been successfully initialized!&lt;/p&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&amp;#13;
&lt;p&gt;Scheduling a Simple Application&lt;/p&gt;&amp;#13;
&lt;p&gt;At the core of a Kubernetes application is the &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/pods/pod/#what-is-a-pod&quot;&gt;pod&lt;/a&gt;. A pod consists of one or more containers which are scheduled on cluster nodes based on CPU or memory being available.&lt;/p&gt;&amp;#13;
&lt;p&gt;Next, use Terraform to create a pod with a single container running nginx, exposing port 80 to the user through the load balancer. By adding labels, Kubernetes can discover all pods (instances) to route traffic to the exposed port automatically.&lt;/p&gt;&amp;#13;
&lt;pre readability=&quot;6&quot;&gt;&amp;#13;
&lt;br/&gt;&lt;code class=&quot;language-hcl&quot; readability=&quot;6&quot;&gt;resource &quot;kubernetes_pod&quot; &quot;echo&quot; {&amp;#13;
metadata {&amp;#13;
  name = &quot;echo-example&quot;&lt;p&gt;labels {&amp;#13;
    App = &quot;echo&quot;&amp;#13;
  }&amp;#13;
}&lt;/p&gt;&lt;p&gt;spec {&amp;#13;
  container {&amp;#13;
    image = &quot;hashicorp/http-echo:0.2.1&quot;&amp;#13;
    name  = &quot;example2&quot;&amp;#13;
    args = [&quot;-listen=:80&quot;, &quot;-text='Hello World'&quot;]&lt;/p&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&amp;#13;
&lt;div class=&quot;highlight&quot; readability=&quot;7&quot;&gt;
&lt;pre class=&quot;highlight plaintext&quot;&gt;&amp;#13;
&lt;code class=&quot;language-hcl&quot;&gt;&lt;code&gt;port {&amp;#13;
  container_port = 80&amp;#13;
}&amp;#13;
&lt;/code&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&lt;/div&gt;&amp;#13;
&lt;pre&gt;&amp;#13;
&lt;br/&gt;}&amp;#13;
}&amp;#13;
}&amp;#13;
&lt;/pre&gt;&amp;#13;
&lt;p&gt;The above is an example and does not represent best practices. In production scenarios, you would run more than one instance of your application for high availability.&lt;/p&gt;&amp;#13;
&lt;p&gt;To expose the pod to end users, provision a &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/service/&quot;&gt;service&lt;/a&gt;. A service is capable of provisioning a load-balancer in some cloud providers. It can manage the relationship between pods and the load balancer while new pods are launched.&lt;/p&gt;&amp;#13;
&lt;pre readability=&quot;7&quot;&gt;&amp;#13;
&lt;br/&gt;&lt;code class=&quot;language-hcl&quot; readability=&quot;8&quot;&gt;resource &quot;kubernetes_service&quot; &quot;echo&quot; {&amp;#13;
metadata {&amp;#13;
  name = &quot;echo-example&quot;&amp;#13;
}&lt;p&gt;spec {&amp;#13;
  selector {&amp;#13;
    App = &quot;${kubernetes_pod.echo.metadata.0.labels.App}&quot;&amp;#13;
  }&lt;/p&gt;&lt;p&gt;port {&amp;#13;
    port        = 80&amp;#13;
    target_port = 80&amp;#13;
  }&lt;/p&gt;&lt;p&gt;type = &quot;LoadBalancer&quot;&amp;#13;
}&amp;#13;
}&lt;/p&gt;&lt;p&gt;output &quot;lb_ip&quot; {&amp;#13;
value = &quot;${kubernetes_service.echo.load_balancer_ingress.0.ip}&quot;&amp;#13;
}&lt;/p&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&amp;#13;
&lt;p&gt;In addition to specifying service, this Terraform configuration also specifies an output. This output is displayed at the end of the Terraform apply and will print the IP of the load balancer making it easily accessible for either operator (human) or any tools/scripts that need it.&lt;/p&gt;&amp;#13;
&lt;p&gt;The plan provides an overview of the actions Terraform plans to take. In this case, you will see two resources (one pod + one service) in the output. As the number of infrastructure and application resources expands, the &lt;code&gt;terraform plan&lt;/code&gt; command becomes useful for understanding impact and rollout effect during updates and changes. Run &lt;code&gt;terraform plan&lt;/code&gt; now:&lt;/p&gt;&amp;#13;
&lt;pre&gt;&amp;#13;
&lt;br/&gt;&lt;code class=&quot;language-text&quot;&gt;$ terraform plan&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&amp;#13;
&amp;#13;
&lt;pre&gt;&amp;#13;
 &amp;#13;
&amp;#13;
&lt;/pre&gt;&amp;#13;
&lt;ul readability=&quot;2&quot;&gt;&lt;li readability=&quot;2&quot;&gt;&amp;#13;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;kubernetes_pod.echo metadata.#: &quot;1&quot; metadata.0.generation: &quot;&amp;lt;computed&amp;gt;&quot; metadata.0.labels.%: &quot;1&quot; metadata.0.labels.App: &quot;echo&quot; metadata.0.name: &quot;echo-example&quot; metadata.0.namespace: &quot;default&quot; spec.#: &quot;1&quot; spec.0.container.#: &quot;1&quot; spec.0.container.0.args.#: &quot;2&quot; spec.0.container.0.args.0: &quot;-listen=:80&quot; spec.0.container.0.args.1: &quot;-text='Hello World'&quot; spec.0.container.0.image: &quot;hashicorp/http-echo:latest&quot; spec.0.container.0.image_pull_policy: &quot;&amp;lt;computed&amp;gt;&quot; spec.0.container.0.name: &quot;example2&quot; spec.0.container.0.port.#: &quot;1&quot; spec.0.container.0.port.0.container_port: &quot;80&quot; ...&lt;/code&gt;&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;li readability=&quot;2&quot;&gt;&amp;#13;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;kubernetes_service.echo load_balancer_ingress.#: &quot;&amp;lt;computed&amp;gt;&quot; metadata.#: &quot;1&quot; metadata.0.generation: &quot;&amp;lt;computed&amp;gt;&quot; metadata.0.name: &quot;echo-example&quot; metadata.0.namespace: &quot;default&quot; metadata.0.resource_version: &quot;&amp;lt;computed&amp;gt;&quot; metadata.0.self_link: &quot;&amp;lt;computed&amp;gt;&quot; metadata.0.uid: &quot;&amp;lt;computed&amp;gt;&quot; spec.#: &quot;1&quot; spec.0.cluster_ip: &quot;&amp;lt;computed&amp;gt;&quot; spec.0.port.#: &quot;1&quot; spec.0.port.0.node_port: &quot;&amp;lt;computed&amp;gt;&quot; spec.0.port.0.port: &quot;80&quot; spec.0.port.0.protocol: &quot;TCP&quot; spec.0.port.0.target_port: &quot;80&quot; spec.0.selector.%: &quot;1&quot; spec.0.selector.App: &quot;echo&quot; spec.0.session_affinity: &quot;None&quot; spec.0.type: &quot;LoadBalancer&quot;&lt;/code&gt;&lt;/p&gt;&amp;#13;
&lt;/li&gt;&amp;#13;
&lt;/ul&gt;&lt;pre&gt;&amp;#13;
&amp;#13;
&lt;br/&gt;Plan: 2 to add, 0 to change, 0 to destroy.&amp;#13;
&lt;/pre&gt;&amp;#13;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;The &lt;code&gt;terraform plan&lt;/code&gt; command never modifies resources; it is purely a dry-run. To apply these changes, run &lt;code&gt;terraform apply&lt;/code&gt;. This command will create resources (via API), handle ordering, failures, and conditionals. Additionally, &lt;code&gt;terraform apply&lt;/code&gt; will block until all resources have finished provisioning. Run &lt;code&gt;terraform apply&lt;/code&gt; now:&lt;/code&gt;&lt;/p&gt;&amp;#13;
&lt;pre readability=&quot;7.5&quot;&gt;&amp;#13;
&lt;br/&gt;&lt;code class=&quot;language-text&quot; readability=&quot;34&quot;&gt;$ terraform apply&lt;p&gt;kubernetes_pod.echo: Creating...&amp;#13;
...&amp;#13;
kubernetes_pod.echo: Creation complete (ID: default/echo-example)&amp;#13;
kubernetes_service.echo: Creating...&amp;#13;
...&amp;#13;
kubernetes_service.echo: Still creating... (10s elapsed)&amp;#13;
kubernetes_service.echo: Still creating... (20s elapsed)&amp;#13;
kubernetes_service.echo: Still creating... (30s elapsed)&amp;#13;
kubernetes_service.echo: Still creating... (40s elapsed)&amp;#13;
kubernetes_service.echo: Creation complete (ID: default/echo-example)&lt;/p&gt;&lt;p&gt;Apply complete! Resources: 2 added, 0 changed, 0 destroyed.&lt;/p&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&amp;#13;
&amp;#13;
&lt;pre&gt;&amp;#13;
 &amp;#13;
&lt;br/&gt;Outputs:&amp;#13;
&lt;br/&gt;lb_ip = 35.197.9.247&amp;#13;
&lt;/pre&gt;&amp;#13;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;To verify the application is running, use &lt;code&gt;curl&lt;/code&gt; from your terminal:&lt;/code&gt;&lt;/p&gt;&amp;#13;
&lt;pre&gt;&amp;#13;
&lt;br/&gt;&lt;code class=&quot;language-text&quot;&gt;$ curl -s $(terraform output lb_ip)&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&amp;#13;
&lt;p&gt;If everything worked as expected, you will see the text &quot;hello world&quot;.&lt;/p&gt;&amp;#13;
&lt;p&gt;The &lt;a href=&quot;https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/&quot;&gt;Kubernetes UI&lt;/a&gt; provides another way to check both the Pod and the Service are there once they are scheduled.&lt;/p&gt;&amp;#13;
&lt;p&gt;Updating Application&lt;/p&gt;&amp;#13;
&lt;p&gt;Over time the need to deploy a new version of your application comes up. The easiest way to perform an upgrade when you deploy a new version is to change &lt;code&gt;image&lt;/code&gt; field in the config accordingly.&lt;/p&gt;&amp;#13;
&lt;pre&gt;&amp;#13;
&lt;br/&gt;&lt;code class=&quot;language-hcl&quot;&gt;resource &quot;kubernetes_pod&quot; &quot;example&quot; {&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&amp;#13;
&amp;#13;
&lt;pre&gt;&amp;#13;
 &amp;#13;
&lt;br/&gt;spec {&amp;#13;
  container {&amp;#13;
    image = &quot;hashicorp/http-echo:0.2.3&quot;&amp;#13;
&lt;/pre&gt;&amp;#13;
&amp;#13;
&lt;pre&gt;&amp;#13;
 &amp;#13;
&lt;br/&gt;}&amp;#13;
&lt;/pre&gt;&amp;#13;
&lt;p&gt;&lt;code class=&quot;language-hcl&quot;&gt;To verify the changes Terraform will make, run &lt;code&gt;terraform plan&lt;/code&gt; and inspect the output. This will also verify that no one else on the team modified the resource created earlier.&lt;/code&gt;&lt;/p&gt;&amp;#13;
&lt;pre readability=&quot;8&quot;&gt;&amp;#13;
&lt;br/&gt;&lt;code class=&quot;language-text&quot; readability=&quot;35&quot;&gt;$ terraform plan&amp;#13;
Refreshing Terraform state in-memory prior to plan...&lt;p&gt;kubernetes_pod.echo: Refreshing state... (ID: default/echo-example)&amp;#13;
kubernetes_service.echo: Refreshing state... (ID: default/echo-example)&lt;/p&gt;&lt;p&gt;...&lt;/p&gt;&lt;p&gt;~ kubernetes_pod.echo&amp;#13;
    spec.0.container.0.image: &quot;hashicorp/http-echo:0.2.1&quot; =&amp;gt; &quot;hashicorp/http-echo:0.2.3&quot;&lt;/p&gt;&lt;p&gt;Plan: 0 to add, 1 to change, 0 to destroy.&lt;/p&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&amp;#13;
&lt;p&gt;Then apply the changes:&lt;/p&gt;&amp;#13;
&lt;pre readability=&quot;7.5&quot;&gt;&amp;#13;
&lt;br/&gt;&lt;code readability=&quot;9&quot;&gt;$ terraform apply&lt;p&gt;kubernetes_pod.echo: Refreshing state... (ID: default/echo-example)&amp;#13;
kubernetes_service.echo: Refreshing state... (ID: default/echo-example)&amp;#13;
kubernetes_pod.echo: Modifying... (ID: default/echo-example)&amp;#13;
spec.0.container.0.image: &quot;hashicorp/http-echo:0.2.1&quot; =&amp;gt; &quot;hashicorp/http-echo:0.2.3&quot;&amp;#13;
kubernetes_pod.echo: Modifications complete (ID: default/echo-example)&lt;/p&gt;&lt;p&gt;Apply complete! Resources: 0 added, 1 changed, 0 destroyed.&lt;/p&gt;&lt;/code&gt;&amp;#13;
&lt;/pre&gt;&amp;#13;
&lt;p&gt;Upon completion, the Pod will start a new container and kill the old one.&lt;/p&gt;&amp;#13;
&lt;p&gt;Conclusion&lt;/p&gt;&amp;#13;
&lt;p&gt;Terraform provides organizations with infrastructure as code, cloud platform management, and ability to create modules for self-service infrastructure. This is one example of how Terraform can help manage infrastructure and resources necessary to run a Kubernetes cluster and schedule the underlying resources. For more information check out the complete guide for &lt;a href=&quot;https://www.terraform.io/docs/providers/kubernetes/guides/getting-started.html&quot;&gt;Managing Kubernetes with Terraform&lt;/a&gt;.&lt;/p&gt;&amp;#13;
&lt;p&gt;For more information on HashiCorp Terraform, visit &lt;a href=&quot;http://www.hashicorp.com/products/terraform&quot;&gt;www.hashicorp.com/products/terraform&lt;/a&gt;&lt;/p&gt;&amp;#13;
</description>
<pubDate>Wed, 23 Aug 2017 00:00:00 +0000</pubDate>
<dc:creator>Radek Simko</dc:creator>
<og:title>Managing Kubernetes Applications with HashiCorp Terraform</og:title>
<og:description>HashiCorp enables organizations to have consistent workflows to provision, secure, connect, and run any infrastructure for any application.</og:description>
<og:image>https://www.datocms-assets.com/2885/1508522484-share.jpg</og:image>
<og:type>article</og:type>
<dc:language>ro</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hashicorp.com/blog/managing-kubernetes-applications-with-hashicorp-terraform</dc:identifier>
</item>
<item>
<title>HashiCorp Extends Microsoft Collaboration to Help Terraform Users Adopt Azure</title>
<link>http://www.hashicorp.com/blog/microsoft-partnership-announcement-terraform-azure</link>
<guid isPermaLink="true" >http://www.hashicorp.com/blog/microsoft-partnership-announcement-terraform-azure</guid>
<description>&lt;p&gt;We are excited to announce a &lt;a href=&quot;http://www2.marketwire.com/mw/release_html_b1?release_id=1317982&quot; target=&quot;_blank&quot;&gt;multi-year collaboration with Microsoft&lt;/a&gt; to deepen the support for the provisioning of resources on Microsoft Azure using HashiCorp Terraform. Microsoft Azure is seeing tremendous growth in Global 2000 organizations as they adopt cloud infrastructure. HashiCorp’s customers use Terraform across a wide variety of cloud and on-premises infrastructures. Through this collaboration, Terraform customers will be able to utilize their provisioning tool of choice much more easily on the world-class Azure infrastructure.&lt;/p&gt;&lt;p&gt;This expansion of the HashiCorp work with Microsoft will broaden the number of Microsoft Azure services that can be provisioned with Terraform. This will allow Terraform users to adopt a consistent workflow across Azure, on-premises environments, and other cloud environments as well. The on-going Microsoft collaboration will focus on the enhancement of the existing &lt;a href=&quot;https://www.terraform.io/docs/providers/azurerm/index.html&quot; target=&quot;_blank&quot;&gt;Terraform Provider for Microsoft Azure&lt;/a&gt; using the Azure Resource Manager (ARM) API. Support will first be built for the Azure data centers in North America, and extended out to support data centers in other geographies over time.&lt;/p&gt;&amp;#13;
&lt;p&gt;We believe our work together will have a big impact simplifying and accelerating the cloud adoption process for Microsoft customers. Please refer to the Microsoft article &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/virtual-machines/linux/terraform-create-complete-vm&quot; target=&quot;_blank&quot;&gt;Install and configure Terraform to provision VMs and other infrastructure into Azure&lt;/a&gt; for more details on how to get started. Corey Sanders, head of product for Azure Compute at Microsoft, has additional perspective on the impact of the &lt;a href=&quot;https://azure.microsoft.com/en-us/blog/investing-deeply-in-terraform-on-azure/&quot; target=&quot;_blank&quot;&gt;HashiCorp-Microsoft collaboration&lt;/a&gt; on his blog.&lt;/p&gt;&amp;#13;
&lt;p&gt;We at HashiCorp look forward to continuing our work together with Microsoft.&lt;/p&gt;&amp;#13;
</description>
<pubDate>Thu, 17 Aug 2017 00:00:00 +0000</pubDate>
<dc:creator>Dave McJannet</dc:creator>
<og:title>HashiCorp Extends Microsoft Collaboration to Help Terraform Users Adopt Azure</og:title>
<og:description>HashiCorp enables organizations to have consistent workflows to provision, secure, connect, and run any infrastructure for any application.</og:description>
<og:image>https://www.datocms-assets.com/2885/1508522484-share.jpg</og:image>
<og:type>article</og:type>
<dc:language>fr</dc:language>
<dc:format>text/html</dc:format>
<dc:identifier>https://www.hashicorp.com/blog/microsoft-partnership-announcement-terraform-azure</dc:identifier>
</item>
</channel>
</rss>